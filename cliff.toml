# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] ({{ timestamp | date(format="%Y-%m-%d") }})
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | filter(attribute="merge_commit", value=false) | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}\
            {% if commit.breaking %}[**Breaking change**]: {% endif %}\
            {{ commit.message }} ([{{ commit.id | truncate(length=7, end="") }}](\
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/commit/{{ commit.id }}))\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% else -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /tree/{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor -%}
"""
# remove the leading and trailing space
trim = true
# postprocessors
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/orhun/git-cliff" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Standardize conventional commits using Angular keywords
  { pattern = '^fix\(refactor\):', replace = 'refactor:' },
  { pattern = '^fix\(docs\):', replace = 'docs:' },
  { pattern = '^fix\(perf\):', replace = 'perf:' },
  { pattern = '^fix\(deps\):', replace = 'deps:' },
  { pattern = '^fix\(test\):', replace = 'test:' },
  { pattern = '^fix\(chore\):', replace = 'chore:' },
  { pattern = '^fix\(ci\):', replace = 'ci:' },
  { pattern = '^fix\(build\):', replace = 'build:' },
  { pattern = '^fix\(security\):', replace = 'security:' },
  { pattern = '^fix\(revert\):', replace = 'revert:' },
  # Replace issue numbers
#   { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  # Skipped commits
  { message = '^chore\(release\)', skip = true },
  { message = '^chore\(pr\)', skip = true },
  { message = '^chore\(pull\)', skip = true },
  # Angular commit groups
  { message = '^feat(\(.*\))?:', group = "<!-- 0 -->Features" },
  { message = '^fix(\(.*\))?:', group = "<!-- 1 -->Bug Fixes" },
  { message = '^refactor(\(.*\))?:', group = "<!-- 2 -->Refactor" },
  { message = '^docs(\(.*\))?:', group = "<!-- 3 -->Documentation" },
  { message = '^perf(\(.*\))?:', group = "<!-- 4 -->Performance" },
  { message = '^deps(\(.*\))?:', group = "<!-- 5 -->Dependencies" },
  { message = '^test(\(.*\))?:', group = "<!-- 6 -->Testing" },
  { message = '^chore(\(.*\))?:|^ci(\(.*\))?:|^build(\(.*\))?:', group = "<!-- 7 -->Miscellaneous Tasks" },
  { body = '^security(\(.*\))?:', group = "<!-- 8 -->Security" },
  { message = '^revert(\(.*\))?:', group = "<!-- 9 -->Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
ignore_tags = '^v0\.1\.0-beta'
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# regex for parsing and extracting external references, and turning them into URLs, using regex.
link_parsers = [
  # generate links for GitHub issues and PRs
  { pattern = "#(\\d+)", href = "https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/issues/$1" },
  # generate links for RFCs
  { pattern = "RFC(\\d+)", text = "ietf-rfc$1", href = "https://datatracker.ietf.org/doc/html/rfc$1" },
  # generate links for CWEs
  { pattern = "CWE-(\\d+)", href = "https://cwe.mitre.org/data/definitions/$1" },
]
# limit the number of commits included in the changelog.
# limit_commits = 42

[remote.github]
owner = "act3-ai"
repo = "hops"
# Pass token with --github-token flag
# or GITHUB_TOKEN environment variable
# token = ""
