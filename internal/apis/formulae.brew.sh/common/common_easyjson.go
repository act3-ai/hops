// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package common

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon(in *jlexer.Lexer, out *Service) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Name = make(map[string]string)
				} else {
					out.Name = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.Name)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "run":
			if m, ok := out.Run.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Run.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Run = in.Interface()
			}
		case "run_type":
			out.RunType = ServiceRunType(in.String())
		case "environment_variables":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.EnvironmentVariables = make(map[string]string)
				} else {
					out.EnvironmentVariables = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.EnvironmentVariables)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "interval":
			out.Interval = time.Duration(in.Int64())
		case "cron":
			out.Cron = string(in.String())
		case "require_root":
			out.RequireRoot = bool(in.Bool())
		case "keep_alive":
			(out.KeepAlive).UnmarshalEasyJSON(in)
		case "working_dir":
			out.WorkingDir = string(in.String())
		case "input_path":
			out.InputPath = string(in.String())
		case "log_path":
			out.LogPath = string(in.String())
		case "error_log_path":
			out.ErrorLogPath = string(in.String())
		case "sockets":
			out.Sockets = string(in.String())
		case "process_type":
			out.ProcessType = ProcessType(in.String())
		case "macos_legacy_timers":
			out.MacOSLegacyTimers = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon(out *jwriter.Writer, in Service) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Name) != 0 {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Name {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				out.String(string(v3Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"run\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Run.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Run.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Run))
		}
	}
	{
		const prefix string = ",\"run_type\":"
		out.RawString(prefix)
		out.String(string(in.RunType))
	}
	if len(in.EnvironmentVariables) != 0 {
		const prefix string = ",\"environment_variables\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.EnvironmentVariables {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.String(string(v4Value))
			}
			out.RawByte('}')
		}
	}
	if in.Interval != 0 {
		const prefix string = ",\"interval\":"
		out.RawString(prefix)
		out.Int64(int64(in.Interval))
	}
	if in.Cron != "" {
		const prefix string = ",\"cron\":"
		out.RawString(prefix)
		out.String(string(in.Cron))
	}
	if in.RequireRoot {
		const prefix string = ",\"require_root\":"
		out.RawString(prefix)
		out.Bool(bool(in.RequireRoot))
	}
	if true {
		const prefix string = ",\"keep_alive\":"
		out.RawString(prefix)
		(in.KeepAlive).MarshalEasyJSON(out)
	}
	if in.WorkingDir != "" {
		const prefix string = ",\"working_dir\":"
		out.RawString(prefix)
		out.String(string(in.WorkingDir))
	}
	if in.InputPath != "" {
		const prefix string = ",\"input_path\":"
		out.RawString(prefix)
		out.String(string(in.InputPath))
	}
	if in.LogPath != "" {
		const prefix string = ",\"log_path\":"
		out.RawString(prefix)
		out.String(string(in.LogPath))
	}
	if in.ErrorLogPath != "" {
		const prefix string = ",\"error_log_path\":"
		out.RawString(prefix)
		out.String(string(in.ErrorLogPath))
	}
	if in.Sockets != "" {
		const prefix string = ",\"sockets\":"
		out.RawString(prefix)
		out.String(string(in.Sockets))
	}
	if in.ProcessType != "" {
		const prefix string = ",\"process_type\":"
		out.RawString(prefix)
		out.String(string(in.ProcessType))
	}
	if in.MacOSLegacyTimers {
		const prefix string = ",\"macos_legacy_timers\":"
		out.RawString(prefix)
		out.Bool(bool(in.MacOSLegacyTimers))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Service) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Service) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Service) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Service) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon(l, v)
}
func easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon1(in *jlexer.Lexer, out *KegOnlyConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reason":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Reason).UnmarshalJSON(data))
			}
		case "explanation":
			out.Explanation = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon1(out *jwriter.Writer, in KegOnlyConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((in.Reason).MarshalJSON())
	}
	if in.Explanation != "" {
		const prefix string = ",\"explanation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Explanation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KegOnlyConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KegOnlyConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KegOnlyConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KegOnlyConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon1(l, v)
}
func easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon2(in *jlexer.Lexer, out *KeepAliveConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "always":
			out.Always = bool(in.Bool())
		case "successful_exit":
			out.SuccessfulExit = bool(in.Bool())
		case "crashed":
			out.Crashed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon2(out *jwriter.Writer, in KeepAliveConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Always {
		const prefix string = ",\"always\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Always))
	}
	if in.SuccessfulExit {
		const prefix string = ",\"successful_exit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SuccessfulExit))
	}
	if in.Crashed {
		const prefix string = ",\"crashed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Crashed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeepAliveConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeepAliveConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC803d3e7EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeepAliveConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeepAliveConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC803d3e7DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShCommon2(l, v)
}
