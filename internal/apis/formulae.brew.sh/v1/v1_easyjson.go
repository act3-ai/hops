// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	common "github.com/act3-ai/hops/internal/apis/formulae.brew.sh/common"
	platform "github.com/act3-ai/hops/internal/platform"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV1(in *jlexer.Lexer, out *Versions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Others":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Others = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Others)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "stable":
			out.Stable = string(in.String())
		case "head":
			if in.IsNull() {
				in.Skip()
				out.Head = nil
			} else {
				if out.Head == nil {
					out.Head = new(string)
				}
				*out.Head = string(in.String())
			}
		case "bottle":
			out.Bottle = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV1(out *jwriter.Writer, in Versions) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Others\":"
		out.RawString(prefix[1:])
		if in.Others == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Others {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Stable != "" {
		const prefix string = ",\"stable\":"
		out.RawString(prefix)
		out.String(string(in.Stable))
	}
	if in.Head != nil {
		const prefix string = ",\"head\":"
		out.RawString(prefix)
		out.String(string(*in.Head))
	}
	if in.Bottle {
		const prefix string = ",\"bottle\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bottle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Versions) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Versions) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Versions) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Versions) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV1(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV11(in *jlexer.Lexer, out *RuntimeDependency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "full_name":
			out.FullName = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "revision":
			out.Revision = int(in.Int())
		case "pkg_version":
			out.PkgVersionValue = string(in.String())
		case "declared_directly":
			out.DeclaredDirectly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV11(out *jwriter.Writer, in RuntimeDependency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FullName != "" {
		const prefix string = ",\"full_name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.FullName))
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Revision))
	}
	if in.PkgVersionValue != "" {
		const prefix string = ",\"pkg_version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PkgVersionValue))
	}
	if in.DeclaredDirectly {
		const prefix string = ",\"declared_directly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.DeclaredDirectly))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RuntimeDependency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RuntimeDependency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RuntimeDependency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RuntimeDependency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV11(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV12(in *jlexer.Lexer, out *Requirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "cask":
			if m, ok := out.Cask.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Cask.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Cask = in.Interface()
			}
		case "download":
			if m, ok := out.Download.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Download.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Download = in.Interface()
			}
		case "version":
			out.Version = string(in.String())
		case "contexts":
			if in.IsNull() {
				in.Skip()
				out.Contexts = nil
			} else {
				in.Delim('[')
				if out.Contexts == nil {
					if !in.IsDelim(']') {
						out.Contexts = make([]string, 0, 4)
					} else {
						out.Contexts = []string{}
					}
				} else {
					out.Contexts = (out.Contexts)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Contexts = append(out.Contexts, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "specs":
			if in.IsNull() {
				in.Skip()
				out.Specs = nil
			} else {
				in.Delim('[')
				if out.Specs == nil {
					if !in.IsDelim(']') {
						out.Specs = make([]string, 0, 4)
					} else {
						out.Specs = []string{}
					}
				} else {
					out.Specs = (out.Specs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Specs = append(out.Specs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV12(out *jwriter.Writer, in Requirement) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Cask != nil {
		const prefix string = ",\"cask\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Cask.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Cask.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Cask))
		}
	}
	if in.Download != nil {
		const prefix string = ",\"download\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Download.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Download.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Download))
		}
	}
	if in.Version != "" {
		const prefix string = ",\"version\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Version))
	}
	if len(in.Contexts) != 0 {
		const prefix string = ",\"contexts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v5, v6 := range in.Contexts {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	if len(in.Specs) != 0 {
		const prefix string = ",\"specs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v7, v8 := range in.Specs {
				if v7 > 0 {
					out.RawByte(',')
				}
				out.String(string(v8))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Requirement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Requirement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Requirement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Requirement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV12(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV13(in *jlexer.Lexer, out *PlatformInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "tap":
			out.Tap = string(in.StringIntern())
		case "oldname":
			out.OldName = string(in.String())
		case "oldnames":
			if in.IsNull() {
				in.Skip()
				out.OldNames = nil
			} else {
				in.Delim('[')
				if out.OldNames == nil {
					if !in.IsDelim(']') {
						out.OldNames = make([]string, 0, 4)
					} else {
						out.OldNames = []string{}
					}
				} else {
					out.OldNames = (out.OldNames)[:0]
				}
				for !in.IsDelim(']') {
					var v9 string
					v9 = string(in.String())
					out.OldNames = append(out.OldNames, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]string, 0, 4)
					} else {
						out.Aliases = []string{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Aliases = append(out.Aliases, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "versioned_formulae":
			if in.IsNull() {
				in.Skip()
				out.VersionedFormulae = nil
			} else {
				in.Delim('[')
				if out.VersionedFormulae == nil {
					if !in.IsDelim(']') {
						out.VersionedFormulae = make([]string, 0, 4)
					} else {
						out.VersionedFormulae = []string{}
					}
				} else {
					out.VersionedFormulae = (out.VersionedFormulae)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.VersionedFormulae = append(out.VersionedFormulae, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "desc":
			out.Desc = string(in.String())
		case "license":
			out.License = string(in.String())
		case "homepage":
			out.Homepage = string(in.String())
		case "versions":
			(out.Versions).UnmarshalEasyJSON(in)
		case "urls":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.URLs = make(map[string]FormulaURL)
				} else {
					out.URLs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 FormulaURL
					(v12).UnmarshalEasyJSON(in)
					(out.URLs)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "revision":
			out.Revision = int(in.Int())
		case "version_scheme":
			out.VersionScheme = int(in.Int())
		case "bottle":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Bottle = make(map[string]*Bottle)
				} else {
					out.Bottle = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 *Bottle
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(Bottle)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					(out.Bottle)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pour_bottle_only_if":
			if in.IsNull() {
				in.Skip()
				out.PourBottleOnlyIf = nil
			} else {
				if out.PourBottleOnlyIf == nil {
					out.PourBottleOnlyIf = new(string)
				}
				*out.PourBottleOnlyIf = string(in.String())
			}
		case "keg_only":
			out.KegOnly = bool(in.Bool())
		case "keg_only_reason":
			(out.KegOnlyReason).UnmarshalEasyJSON(in)
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]interface{}, 0, 4)
					} else {
						out.Options = []interface{}{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v14 interface{}
					if m, ok := v14.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v14.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v14 = in.Interface()
					}
					out.Options = append(out.Options, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "build_dependencies":
			if in.IsNull() {
				in.Skip()
				out.BuildDependencies = nil
			} else {
				in.Delim('[')
				if out.BuildDependencies == nil {
					if !in.IsDelim(']') {
						out.BuildDependencies = make([]string, 0, 4)
					} else {
						out.BuildDependencies = []string{}
					}
				} else {
					out.BuildDependencies = (out.BuildDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v15 string
					v15 = string(in.String())
					out.BuildDependencies = append(out.BuildDependencies, v15)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]string, 0, 4)
					} else {
						out.Dependencies = []string{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.Dependencies = append(out.Dependencies, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "test_dependencies":
			if in.IsNull() {
				in.Skip()
				out.TestDependencies = nil
			} else {
				in.Delim('[')
				if out.TestDependencies == nil {
					if !in.IsDelim(']') {
						out.TestDependencies = make([]string, 0, 4)
					} else {
						out.TestDependencies = []string{}
					}
				} else {
					out.TestDependencies = (out.TestDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.TestDependencies = append(out.TestDependencies, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "recommended_dependencies":
			if in.IsNull() {
				in.Skip()
				out.RecommendedDependencies = nil
			} else {
				in.Delim('[')
				if out.RecommendedDependencies == nil {
					if !in.IsDelim(']') {
						out.RecommendedDependencies = make([]string, 0, 4)
					} else {
						out.RecommendedDependencies = []string{}
					}
				} else {
					out.RecommendedDependencies = (out.RecommendedDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.RecommendedDependencies = append(out.RecommendedDependencies, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional_dependencies":
			if in.IsNull() {
				in.Skip()
				out.OptionalDependencies = nil
			} else {
				in.Delim('[')
				if out.OptionalDependencies == nil {
					if !in.IsDelim(']') {
						out.OptionalDependencies = make([]string, 0, 4)
					} else {
						out.OptionalDependencies = []string{}
					}
				} else {
					out.OptionalDependencies = (out.OptionalDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v19 string
					v19 = string(in.String())
					out.OptionalDependencies = append(out.OptionalDependencies, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uses_from_macos":
			if in.IsNull() {
				in.Skip()
				out.UsesFromMacOS = nil
			} else {
				in.Delim('[')
				if out.UsesFromMacOS == nil {
					if !in.IsDelim(']') {
						out.UsesFromMacOS = make([]interface{}, 0, 4)
					} else {
						out.UsesFromMacOS = []interface{}{}
					}
				} else {
					out.UsesFromMacOS = (out.UsesFromMacOS)[:0]
				}
				for !in.IsDelim(']') {
					var v20 interface{}
					if m, ok := v20.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v20.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v20 = in.Interface()
					}
					out.UsesFromMacOS = append(out.UsesFromMacOS, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uses_from_macos_bounds":
			if in.IsNull() {
				in.Skip()
				out.UsesFromMacOSBounds = nil
			} else {
				in.Delim('[')
				if out.UsesFromMacOSBounds == nil {
					if !in.IsDelim(']') {
						out.UsesFromMacOSBounds = make([]*MacOSBounds, 0, 8)
					} else {
						out.UsesFromMacOSBounds = []*MacOSBounds{}
					}
				} else {
					out.UsesFromMacOSBounds = (out.UsesFromMacOSBounds)[:0]
				}
				for !in.IsDelim(']') {
					var v21 *MacOSBounds
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						if v21 == nil {
							v21 = new(MacOSBounds)
						}
						(*v21).UnmarshalEasyJSON(in)
					}
					out.UsesFromMacOSBounds = append(out.UsesFromMacOSBounds, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make([]*Requirement, 0, 8)
					} else {
						out.Requirements = []*Requirement{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *Requirement
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(Requirement)
						}
						(*v22).UnmarshalEasyJSON(in)
					}
					out.Requirements = append(out.Requirements, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conflicts_with":
			if in.IsNull() {
				in.Skip()
				out.ConflictsWith = nil
			} else {
				in.Delim('[')
				if out.ConflictsWith == nil {
					if !in.IsDelim(']') {
						out.ConflictsWith = make([]string, 0, 4)
					} else {
						out.ConflictsWith = []string{}
					}
				} else {
					out.ConflictsWith = (out.ConflictsWith)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.ConflictsWith = append(out.ConflictsWith, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conflicts_with_reasons":
			if in.IsNull() {
				in.Skip()
				out.ConflictsWithReasons = nil
			} else {
				in.Delim('[')
				if out.ConflictsWithReasons == nil {
					if !in.IsDelim(']') {
						out.ConflictsWithReasons = make([]string, 0, 4)
					} else {
						out.ConflictsWithReasons = []string{}
					}
				} else {
					out.ConflictsWithReasons = (out.ConflictsWithReasons)[:0]
				}
				for !in.IsDelim(']') {
					var v24 string
					v24 = string(in.String())
					out.ConflictsWithReasons = append(out.ConflictsWithReasons, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "link_overwrite":
			if in.IsNull() {
				in.Skip()
				out.LinkOverwrite = nil
			} else {
				in.Delim('[')
				if out.LinkOverwrite == nil {
					if !in.IsDelim(']') {
						out.LinkOverwrite = make([]string, 0, 4)
					} else {
						out.LinkOverwrite = []string{}
					}
				} else {
					out.LinkOverwrite = (out.LinkOverwrite)[:0]
				}
				for !in.IsDelim(']') {
					var v25 string
					v25 = string(in.String())
					out.LinkOverwrite = append(out.LinkOverwrite, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "caveats":
			if in.IsNull() {
				in.Skip()
				out.Caveats = nil
			} else {
				if out.Caveats == nil {
					out.Caveats = new(string)
				}
				*out.Caveats = string(in.String())
			}
		case "installed":
			if in.IsNull() {
				in.Skip()
				out.Installed = nil
			} else {
				in.Delim('[')
				if out.Installed == nil {
					if !in.IsDelim(']') {
						out.Installed = make([]InstalledInfo, 0, 0)
					} else {
						out.Installed = []InstalledInfo{}
					}
				} else {
					out.Installed = (out.Installed)[:0]
				}
				for !in.IsDelim(']') {
					var v26 InstalledInfo
					(v26).UnmarshalEasyJSON(in)
					out.Installed = append(out.Installed, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "linked_keg":
			out.LinkedKeg = string(in.String())
		case "pinned":
			out.Pinned = bool(in.Bool())
		case "outdated":
			out.Outdated = bool(in.Bool())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "deprecation_date":
			if in.IsNull() {
				in.Skip()
				out.DeprecationDate = nil
			} else {
				if out.DeprecationDate == nil {
					out.DeprecationDate = new(string)
				}
				*out.DeprecationDate = string(in.String())
			}
		case "deprecation_reason":
			if in.IsNull() {
				in.Skip()
				out.DeprecationReason = nil
			} else {
				if out.DeprecationReason == nil {
					out.DeprecationReason = new(string)
				}
				*out.DeprecationReason = string(in.String())
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "disable_date":
			if in.IsNull() {
				in.Skip()
				out.DisabledDate = nil
			} else {
				if out.DisabledDate == nil {
					out.DisabledDate = new(string)
				}
				*out.DisabledDate = string(in.String())
			}
		case "disable_reason":
			if in.IsNull() {
				in.Skip()
				out.DisabledReason = nil
			} else {
				if out.DisabledReason == nil {
					out.DisabledReason = new(string)
				}
				*out.DisabledReason = string(in.String())
			}
		case "post_install_defined":
			out.PostInstallDefined = bool(in.Bool())
		case "service":
			if in.IsNull() {
				in.Skip()
				out.Service = nil
			} else {
				if out.Service == nil {
					out.Service = new(common.Service)
				}
				(*out.Service).UnmarshalEasyJSON(in)
			}
		case "tap_git_head":
			out.TapGitHead = string(in.StringIntern())
		case "ruby_source_path":
			out.RubySourcePath = string(in.String())
		case "ruby_source_checksum":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.RubySourceChecksum = make(map[string]string)
				} else {
					out.RubySourceChecksum = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v27 string
					v27 = string(in.String())
					(out.RubySourceChecksum)[key] = v27
					in.WantComma()
				}
				in.Delim('}')
			}
		case "head_dependencies":
			if in.IsNull() {
				in.Skip()
				out.HeadDependencies = nil
			} else {
				if out.HeadDependencies == nil {
					out.HeadDependencies = new(HeadDependencies)
				}
				(*out.HeadDependencies).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV13(out *jwriter.Writer, in PlatformInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.FullName != "" {
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	if in.Tap != "" {
		const prefix string = ",\"tap\":"
		out.RawString(prefix)
		out.String(string(in.Tap))
	}
	if in.OldName != "" {
		const prefix string = ",\"oldname\":"
		out.RawString(prefix)
		out.String(string(in.OldName))
	}
	if len(in.OldNames) != 0 {
		const prefix string = ",\"oldnames\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v28, v29 := range in.OldNames {
				if v28 > 0 {
					out.RawByte(',')
				}
				out.String(string(v29))
			}
			out.RawByte(']')
		}
	}
	if len(in.Aliases) != 0 {
		const prefix string = ",\"aliases\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.Aliases {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if len(in.VersionedFormulae) != 0 {
		const prefix string = ",\"versioned_formulae\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v32, v33 := range in.VersionedFormulae {
				if v32 > 0 {
					out.RawByte(',')
				}
				out.String(string(v33))
			}
			out.RawByte(']')
		}
	}
	if in.Desc != "" {
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	if in.License != "" {
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		out.String(string(in.License))
	}
	if in.Homepage != "" {
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	if true {
		const prefix string = ",\"versions\":"
		out.RawString(prefix)
		(in.Versions).MarshalEasyJSON(out)
	}
	if len(in.URLs) != 0 {
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.URLs {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v34Name))
				out.RawByte(':')
				(v34Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.Int(int(in.Revision))
	}
	if in.VersionScheme != 0 {
		const prefix string = ",\"version_scheme\":"
		out.RawString(prefix)
		out.Int(int(in.VersionScheme))
	}
	if len(in.Bottle) != 0 {
		const prefix string = ",\"bottle\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v35First := true
			for v35Name, v35Value := range in.Bottle {
				if v35First {
					v35First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v35Name))
				out.RawByte(':')
				if v35Value == nil {
					out.RawString("null")
				} else {
					(*v35Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if in.PourBottleOnlyIf != nil {
		const prefix string = ",\"pour_bottle_only_if\":"
		out.RawString(prefix)
		out.String(string(*in.PourBottleOnlyIf))
	}
	if in.KegOnly {
		const prefix string = ",\"keg_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.KegOnly))
	}
	if true {
		const prefix string = ",\"keg_only_reason\":"
		out.RawString(prefix)
		(in.KegOnlyReason).MarshalEasyJSON(out)
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v36, v37 := range in.Options {
				if v36 > 0 {
					out.RawByte(',')
				}
				if m, ok := v37.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v37.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v37))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.BuildDependencies) != 0 {
		const prefix string = ",\"build_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v38, v39 := range in.BuildDependencies {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v40, v41 := range in.Dependencies {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.String(string(v41))
			}
			out.RawByte(']')
		}
	}
	if len(in.TestDependencies) != 0 {
		const prefix string = ",\"test_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v42, v43 := range in.TestDependencies {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if len(in.RecommendedDependencies) != 0 {
		const prefix string = ",\"recommended_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v44, v45 := range in.RecommendedDependencies {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if len(in.OptionalDependencies) != 0 {
		const prefix string = ",\"optional_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v46, v47 := range in.OptionalDependencies {
				if v46 > 0 {
					out.RawByte(',')
				}
				out.String(string(v47))
			}
			out.RawByte(']')
		}
	}
	if len(in.UsesFromMacOS) != 0 {
		const prefix string = ",\"uses_from_macos\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v48, v49 := range in.UsesFromMacOS {
				if v48 > 0 {
					out.RawByte(',')
				}
				if m, ok := v49.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v49.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v49))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.UsesFromMacOSBounds) != 0 {
		const prefix string = ",\"uses_from_macos_bounds\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v50, v51 := range in.UsesFromMacOSBounds {
				if v50 > 0 {
					out.RawByte(',')
				}
				if v51 == nil {
					out.RawString("null")
				} else {
					(*v51).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v52, v53 := range in.Requirements {
				if v52 > 0 {
					out.RawByte(',')
				}
				if v53 == nil {
					out.RawString("null")
				} else {
					(*v53).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ConflictsWith) != 0 {
		const prefix string = ",\"conflicts_with\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v54, v55 := range in.ConflictsWith {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.String(string(v55))
			}
			out.RawByte(']')
		}
	}
	if len(in.ConflictsWithReasons) != 0 {
		const prefix string = ",\"conflicts_with_reasons\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v56, v57 := range in.ConflictsWithReasons {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if len(in.LinkOverwrite) != 0 {
		const prefix string = ",\"link_overwrite\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v58, v59 := range in.LinkOverwrite {
				if v58 > 0 {
					out.RawByte(',')
				}
				out.String(string(v59))
			}
			out.RawByte(']')
		}
	}
	if in.Caveats != nil {
		const prefix string = ",\"caveats\":"
		out.RawString(prefix)
		out.String(string(*in.Caveats))
	}
	if len(in.Installed) != 0 {
		const prefix string = ",\"installed\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v60, v61 := range in.Installed {
				if v60 > 0 {
					out.RawByte(',')
				}
				(v61).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.LinkedKeg != "" {
		const prefix string = ",\"linked_keg\":"
		out.RawString(prefix)
		out.String(string(in.LinkedKeg))
	}
	if in.Pinned {
		const prefix string = ",\"pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pinned))
	}
	if in.Outdated {
		const prefix string = ",\"outdated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Outdated))
	}
	if in.Deprecated {
		const prefix string = ",\"deprecated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deprecated))
	}
	if in.DeprecationDate != nil {
		const prefix string = ",\"deprecation_date\":"
		out.RawString(prefix)
		out.String(string(*in.DeprecationDate))
	}
	if in.DeprecationReason != nil {
		const prefix string = ",\"deprecation_reason\":"
		out.RawString(prefix)
		out.String(string(*in.DeprecationReason))
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Disabled))
	}
	if in.DisabledDate != nil {
		const prefix string = ",\"disable_date\":"
		out.RawString(prefix)
		out.String(string(*in.DisabledDate))
	}
	if in.DisabledReason != nil {
		const prefix string = ",\"disable_reason\":"
		out.RawString(prefix)
		out.String(string(*in.DisabledReason))
	}
	if in.PostInstallDefined {
		const prefix string = ",\"post_install_defined\":"
		out.RawString(prefix)
		out.Bool(bool(in.PostInstallDefined))
	}
	if in.Service != nil {
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		(*in.Service).MarshalEasyJSON(out)
	}
	if in.TapGitHead != "" {
		const prefix string = ",\"tap_git_head\":"
		out.RawString(prefix)
		out.String(string(in.TapGitHead))
	}
	if in.RubySourcePath != "" {
		const prefix string = ",\"ruby_source_path\":"
		out.RawString(prefix)
		out.String(string(in.RubySourcePath))
	}
	if len(in.RubySourceChecksum) != 0 {
		const prefix string = ",\"ruby_source_checksum\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v62First := true
			for v62Name, v62Value := range in.RubySourceChecksum {
				if v62First {
					v62First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v62Name))
				out.RawByte(':')
				out.String(string(v62Value))
			}
			out.RawByte('}')
		}
	}
	if in.HeadDependencies != nil {
		const prefix string = ",\"head_dependencies\":"
		out.RawString(prefix)
		(*in.HeadDependencies).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlatformInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlatformInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlatformInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlatformInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV13(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV14(in *jlexer.Lexer, out *MacOSBounds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "since":
			out.Since = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV14(out *jwriter.Writer, in MacOSBounds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Since != "" {
		const prefix string = ",\"since\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Since))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MacOSBounds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MacOSBounds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MacOSBounds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MacOSBounds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV14(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV15(in *jlexer.Lexer, out *InstalledInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "used_options":
			if in.IsNull() {
				in.Skip()
				out.UsedOptions = nil
			} else {
				in.Delim('[')
				if out.UsedOptions == nil {
					if !in.IsDelim(']') {
						out.UsedOptions = make([]interface{}, 0, 4)
					} else {
						out.UsedOptions = []interface{}{}
					}
				} else {
					out.UsedOptions = (out.UsedOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v63 interface{}
					if m, ok := v63.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v63.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v63 = in.Interface()
					}
					out.UsedOptions = append(out.UsedOptions, v63)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "built_as_bottle":
			out.BuiltAsBottle = bool(in.Bool())
		case "poured_from_bottle":
			out.PouredFromBottle = bool(in.Bool())
		case "time":
			out.Time = int(in.Int())
		case "runtime_dependencies":
			if in.IsNull() {
				in.Skip()
				out.RuntimeDependencies = nil
			} else {
				in.Delim('[')
				if out.RuntimeDependencies == nil {
					if !in.IsDelim(']') {
						out.RuntimeDependencies = make([]*RuntimeDependency, 0, 8)
					} else {
						out.RuntimeDependencies = []*RuntimeDependency{}
					}
				} else {
					out.RuntimeDependencies = (out.RuntimeDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v64 *RuntimeDependency
					if in.IsNull() {
						in.Skip()
						v64 = nil
					} else {
						if v64 == nil {
							v64 = new(RuntimeDependency)
						}
						(*v64).UnmarshalEasyJSON(in)
					}
					out.RuntimeDependencies = append(out.RuntimeDependencies, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "installed_as_dependency":
			out.InstalledAsDependency = bool(in.Bool())
		case "installed_on_request":
			out.InstalledOnRequest = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV15(out *jwriter.Writer, in InstalledInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"used_options\":"
		out.RawString(prefix)
		if in.UsedOptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.UsedOptions {
				if v65 > 0 {
					out.RawByte(',')
				}
				if m, ok := v66.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v66.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v66))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"built_as_bottle\":"
		out.RawString(prefix)
		out.Bool(bool(in.BuiltAsBottle))
	}
	{
		const prefix string = ",\"poured_from_bottle\":"
		out.RawString(prefix)
		out.Bool(bool(in.PouredFromBottle))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int(int(in.Time))
	}
	{
		const prefix string = ",\"runtime_dependencies\":"
		out.RawString(prefix)
		if in.RuntimeDependencies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v67, v68 := range in.RuntimeDependencies {
				if v67 > 0 {
					out.RawByte(',')
				}
				if v68 == nil {
					out.RawString("null")
				} else {
					(*v68).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"installed_as_dependency\":"
		out.RawString(prefix)
		out.Bool(bool(in.InstalledAsDependency))
	}
	{
		const prefix string = ",\"installed_on_request\":"
		out.RawString(prefix)
		out.Bool(bool(in.InstalledOnRequest))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InstalledInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InstalledInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InstalledInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InstalledInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV15(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV16(in *jlexer.Lexer, out *Info) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Variations = make(map[platform.Platform]*PlatformInfo)
				for !in.IsDelim('}') {
					key := platform.Platform(in.String())
					in.WantColon()
					var v69 *PlatformInfo
					if in.IsNull() {
						in.Skip()
						v69 = nil
					} else {
						if v69 == nil {
							v69 = new(PlatformInfo)
						}
						(*v69).UnmarshalEasyJSON(in)
					}
					(out.Variations)[key] = v69
					in.WantComma()
				}
				in.Delim('}')
			}
		case "name":
			out.Name = string(in.String())
		case "full_name":
			out.FullName = string(in.String())
		case "tap":
			out.Tap = string(in.StringIntern())
		case "oldname":
			out.OldName = string(in.String())
		case "oldnames":
			if in.IsNull() {
				in.Skip()
				out.OldNames = nil
			} else {
				in.Delim('[')
				if out.OldNames == nil {
					if !in.IsDelim(']') {
						out.OldNames = make([]string, 0, 4)
					} else {
						out.OldNames = []string{}
					}
				} else {
					out.OldNames = (out.OldNames)[:0]
				}
				for !in.IsDelim(']') {
					var v70 string
					v70 = string(in.String())
					out.OldNames = append(out.OldNames, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]string, 0, 4)
					} else {
						out.Aliases = []string{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v71 string
					v71 = string(in.String())
					out.Aliases = append(out.Aliases, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "versioned_formulae":
			if in.IsNull() {
				in.Skip()
				out.VersionedFormulae = nil
			} else {
				in.Delim('[')
				if out.VersionedFormulae == nil {
					if !in.IsDelim(']') {
						out.VersionedFormulae = make([]string, 0, 4)
					} else {
						out.VersionedFormulae = []string{}
					}
				} else {
					out.VersionedFormulae = (out.VersionedFormulae)[:0]
				}
				for !in.IsDelim(']') {
					var v72 string
					v72 = string(in.String())
					out.VersionedFormulae = append(out.VersionedFormulae, v72)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "desc":
			out.Desc = string(in.String())
		case "license":
			out.License = string(in.String())
		case "homepage":
			out.Homepage = string(in.String())
		case "versions":
			(out.Versions).UnmarshalEasyJSON(in)
		case "urls":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.URLs = make(map[string]FormulaURL)
				} else {
					out.URLs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v73 FormulaURL
					(v73).UnmarshalEasyJSON(in)
					(out.URLs)[key] = v73
					in.WantComma()
				}
				in.Delim('}')
			}
		case "revision":
			out.Revision = int(in.Int())
		case "version_scheme":
			out.VersionScheme = int(in.Int())
		case "bottle":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Bottle = make(map[string]*Bottle)
				} else {
					out.Bottle = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v74 *Bottle
					if in.IsNull() {
						in.Skip()
						v74 = nil
					} else {
						if v74 == nil {
							v74 = new(Bottle)
						}
						(*v74).UnmarshalEasyJSON(in)
					}
					(out.Bottle)[key] = v74
					in.WantComma()
				}
				in.Delim('}')
			}
		case "pour_bottle_only_if":
			if in.IsNull() {
				in.Skip()
				out.PourBottleOnlyIf = nil
			} else {
				if out.PourBottleOnlyIf == nil {
					out.PourBottleOnlyIf = new(string)
				}
				*out.PourBottleOnlyIf = string(in.String())
			}
		case "keg_only":
			out.KegOnly = bool(in.Bool())
		case "keg_only_reason":
			(out.KegOnlyReason).UnmarshalEasyJSON(in)
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]interface{}, 0, 4)
					} else {
						out.Options = []interface{}{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v75 interface{}
					if m, ok := v75.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v75.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v75 = in.Interface()
					}
					out.Options = append(out.Options, v75)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "build_dependencies":
			if in.IsNull() {
				in.Skip()
				out.BuildDependencies = nil
			} else {
				in.Delim('[')
				if out.BuildDependencies == nil {
					if !in.IsDelim(']') {
						out.BuildDependencies = make([]string, 0, 4)
					} else {
						out.BuildDependencies = []string{}
					}
				} else {
					out.BuildDependencies = (out.BuildDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v76 string
					v76 = string(in.String())
					out.BuildDependencies = append(out.BuildDependencies, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]string, 0, 4)
					} else {
						out.Dependencies = []string{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v77 string
					v77 = string(in.String())
					out.Dependencies = append(out.Dependencies, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "test_dependencies":
			if in.IsNull() {
				in.Skip()
				out.TestDependencies = nil
			} else {
				in.Delim('[')
				if out.TestDependencies == nil {
					if !in.IsDelim(']') {
						out.TestDependencies = make([]string, 0, 4)
					} else {
						out.TestDependencies = []string{}
					}
				} else {
					out.TestDependencies = (out.TestDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v78 string
					v78 = string(in.String())
					out.TestDependencies = append(out.TestDependencies, v78)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "recommended_dependencies":
			if in.IsNull() {
				in.Skip()
				out.RecommendedDependencies = nil
			} else {
				in.Delim('[')
				if out.RecommendedDependencies == nil {
					if !in.IsDelim(']') {
						out.RecommendedDependencies = make([]string, 0, 4)
					} else {
						out.RecommendedDependencies = []string{}
					}
				} else {
					out.RecommendedDependencies = (out.RecommendedDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v79 string
					v79 = string(in.String())
					out.RecommendedDependencies = append(out.RecommendedDependencies, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional_dependencies":
			if in.IsNull() {
				in.Skip()
				out.OptionalDependencies = nil
			} else {
				in.Delim('[')
				if out.OptionalDependencies == nil {
					if !in.IsDelim(']') {
						out.OptionalDependencies = make([]string, 0, 4)
					} else {
						out.OptionalDependencies = []string{}
					}
				} else {
					out.OptionalDependencies = (out.OptionalDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v80 string
					v80 = string(in.String())
					out.OptionalDependencies = append(out.OptionalDependencies, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uses_from_macos":
			if in.IsNull() {
				in.Skip()
				out.UsesFromMacOS = nil
			} else {
				in.Delim('[')
				if out.UsesFromMacOS == nil {
					if !in.IsDelim(']') {
						out.UsesFromMacOS = make([]interface{}, 0, 4)
					} else {
						out.UsesFromMacOS = []interface{}{}
					}
				} else {
					out.UsesFromMacOS = (out.UsesFromMacOS)[:0]
				}
				for !in.IsDelim(']') {
					var v81 interface{}
					if m, ok := v81.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v81.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v81 = in.Interface()
					}
					out.UsesFromMacOS = append(out.UsesFromMacOS, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uses_from_macos_bounds":
			if in.IsNull() {
				in.Skip()
				out.UsesFromMacOSBounds = nil
			} else {
				in.Delim('[')
				if out.UsesFromMacOSBounds == nil {
					if !in.IsDelim(']') {
						out.UsesFromMacOSBounds = make([]*MacOSBounds, 0, 8)
					} else {
						out.UsesFromMacOSBounds = []*MacOSBounds{}
					}
				} else {
					out.UsesFromMacOSBounds = (out.UsesFromMacOSBounds)[:0]
				}
				for !in.IsDelim(']') {
					var v82 *MacOSBounds
					if in.IsNull() {
						in.Skip()
						v82 = nil
					} else {
						if v82 == nil {
							v82 = new(MacOSBounds)
						}
						(*v82).UnmarshalEasyJSON(in)
					}
					out.UsesFromMacOSBounds = append(out.UsesFromMacOSBounds, v82)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make([]*Requirement, 0, 8)
					} else {
						out.Requirements = []*Requirement{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v83 *Requirement
					if in.IsNull() {
						in.Skip()
						v83 = nil
					} else {
						if v83 == nil {
							v83 = new(Requirement)
						}
						(*v83).UnmarshalEasyJSON(in)
					}
					out.Requirements = append(out.Requirements, v83)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conflicts_with":
			if in.IsNull() {
				in.Skip()
				out.ConflictsWith = nil
			} else {
				in.Delim('[')
				if out.ConflictsWith == nil {
					if !in.IsDelim(']') {
						out.ConflictsWith = make([]string, 0, 4)
					} else {
						out.ConflictsWith = []string{}
					}
				} else {
					out.ConflictsWith = (out.ConflictsWith)[:0]
				}
				for !in.IsDelim(']') {
					var v84 string
					v84 = string(in.String())
					out.ConflictsWith = append(out.ConflictsWith, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conflicts_with_reasons":
			if in.IsNull() {
				in.Skip()
				out.ConflictsWithReasons = nil
			} else {
				in.Delim('[')
				if out.ConflictsWithReasons == nil {
					if !in.IsDelim(']') {
						out.ConflictsWithReasons = make([]string, 0, 4)
					} else {
						out.ConflictsWithReasons = []string{}
					}
				} else {
					out.ConflictsWithReasons = (out.ConflictsWithReasons)[:0]
				}
				for !in.IsDelim(']') {
					var v85 string
					v85 = string(in.String())
					out.ConflictsWithReasons = append(out.ConflictsWithReasons, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "link_overwrite":
			if in.IsNull() {
				in.Skip()
				out.LinkOverwrite = nil
			} else {
				in.Delim('[')
				if out.LinkOverwrite == nil {
					if !in.IsDelim(']') {
						out.LinkOverwrite = make([]string, 0, 4)
					} else {
						out.LinkOverwrite = []string{}
					}
				} else {
					out.LinkOverwrite = (out.LinkOverwrite)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.LinkOverwrite = append(out.LinkOverwrite, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "caveats":
			if in.IsNull() {
				in.Skip()
				out.Caveats = nil
			} else {
				if out.Caveats == nil {
					out.Caveats = new(string)
				}
				*out.Caveats = string(in.String())
			}
		case "installed":
			if in.IsNull() {
				in.Skip()
				out.Installed = nil
			} else {
				in.Delim('[')
				if out.Installed == nil {
					if !in.IsDelim(']') {
						out.Installed = make([]InstalledInfo, 0, 0)
					} else {
						out.Installed = []InstalledInfo{}
					}
				} else {
					out.Installed = (out.Installed)[:0]
				}
				for !in.IsDelim(']') {
					var v87 InstalledInfo
					(v87).UnmarshalEasyJSON(in)
					out.Installed = append(out.Installed, v87)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "linked_keg":
			out.LinkedKeg = string(in.String())
		case "pinned":
			out.Pinned = bool(in.Bool())
		case "outdated":
			out.Outdated = bool(in.Bool())
		case "deprecated":
			out.Deprecated = bool(in.Bool())
		case "deprecation_date":
			if in.IsNull() {
				in.Skip()
				out.DeprecationDate = nil
			} else {
				if out.DeprecationDate == nil {
					out.DeprecationDate = new(string)
				}
				*out.DeprecationDate = string(in.String())
			}
		case "deprecation_reason":
			if in.IsNull() {
				in.Skip()
				out.DeprecationReason = nil
			} else {
				if out.DeprecationReason == nil {
					out.DeprecationReason = new(string)
				}
				*out.DeprecationReason = string(in.String())
			}
		case "disabled":
			out.Disabled = bool(in.Bool())
		case "disable_date":
			if in.IsNull() {
				in.Skip()
				out.DisabledDate = nil
			} else {
				if out.DisabledDate == nil {
					out.DisabledDate = new(string)
				}
				*out.DisabledDate = string(in.String())
			}
		case "disable_reason":
			if in.IsNull() {
				in.Skip()
				out.DisabledReason = nil
			} else {
				if out.DisabledReason == nil {
					out.DisabledReason = new(string)
				}
				*out.DisabledReason = string(in.String())
			}
		case "post_install_defined":
			out.PostInstallDefined = bool(in.Bool())
		case "service":
			if in.IsNull() {
				in.Skip()
				out.Service = nil
			} else {
				if out.Service == nil {
					out.Service = new(common.Service)
				}
				(*out.Service).UnmarshalEasyJSON(in)
			}
		case "tap_git_head":
			out.TapGitHead = string(in.StringIntern())
		case "ruby_source_path":
			out.RubySourcePath = string(in.String())
		case "ruby_source_checksum":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.RubySourceChecksum = make(map[string]string)
				} else {
					out.RubySourceChecksum = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v88 string
					v88 = string(in.String())
					(out.RubySourceChecksum)[key] = v88
					in.WantComma()
				}
				in.Delim('}')
			}
		case "head_dependencies":
			if in.IsNull() {
				in.Skip()
				out.HeadDependencies = nil
			} else {
				if out.HeadDependencies == nil {
					out.HeadDependencies = new(HeadDependencies)
				}
				(*out.HeadDependencies).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV16(out *jwriter.Writer, in Info) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variations\":"
		out.RawString(prefix[1:])
		if in.Variations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v89First := true
			for v89Name, v89Value := range in.Variations {
				if v89First {
					v89First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v89Name))
				out.RawByte(':')
				if v89Value == nil {
					out.RawString("null")
				} else {
					(*v89Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.FullName != "" {
		const prefix string = ",\"full_name\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	if in.Tap != "" {
		const prefix string = ",\"tap\":"
		out.RawString(prefix)
		out.String(string(in.Tap))
	}
	if in.OldName != "" {
		const prefix string = ",\"oldname\":"
		out.RawString(prefix)
		out.String(string(in.OldName))
	}
	if len(in.OldNames) != 0 {
		const prefix string = ",\"oldnames\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v90, v91 := range in.OldNames {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.String(string(v91))
			}
			out.RawByte(']')
		}
	}
	if len(in.Aliases) != 0 {
		const prefix string = ",\"aliases\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v92, v93 := range in.Aliases {
				if v92 > 0 {
					out.RawByte(',')
				}
				out.String(string(v93))
			}
			out.RawByte(']')
		}
	}
	if len(in.VersionedFormulae) != 0 {
		const prefix string = ",\"versioned_formulae\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v94, v95 := range in.VersionedFormulae {
				if v94 > 0 {
					out.RawByte(',')
				}
				out.String(string(v95))
			}
			out.RawByte(']')
		}
	}
	if in.Desc != "" {
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	if in.License != "" {
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		out.String(string(in.License))
	}
	if in.Homepage != "" {
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	if true {
		const prefix string = ",\"versions\":"
		out.RawString(prefix)
		(in.Versions).MarshalEasyJSON(out)
	}
	if len(in.URLs) != 0 {
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v96First := true
			for v96Name, v96Value := range in.URLs {
				if v96First {
					v96First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v96Name))
				out.RawByte(':')
				(v96Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.Int(int(in.Revision))
	}
	if in.VersionScheme != 0 {
		const prefix string = ",\"version_scheme\":"
		out.RawString(prefix)
		out.Int(int(in.VersionScheme))
	}
	if len(in.Bottle) != 0 {
		const prefix string = ",\"bottle\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v97First := true
			for v97Name, v97Value := range in.Bottle {
				if v97First {
					v97First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v97Name))
				out.RawByte(':')
				if v97Value == nil {
					out.RawString("null")
				} else {
					(*v97Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if in.PourBottleOnlyIf != nil {
		const prefix string = ",\"pour_bottle_only_if\":"
		out.RawString(prefix)
		out.String(string(*in.PourBottleOnlyIf))
	}
	if in.KegOnly {
		const prefix string = ",\"keg_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.KegOnly))
	}
	if true {
		const prefix string = ",\"keg_only_reason\":"
		out.RawString(prefix)
		(in.KegOnlyReason).MarshalEasyJSON(out)
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v98, v99 := range in.Options {
				if v98 > 0 {
					out.RawByte(',')
				}
				if m, ok := v99.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v99.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v99))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.BuildDependencies) != 0 {
		const prefix string = ",\"build_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v100, v101 := range in.BuildDependencies {
				if v100 > 0 {
					out.RawByte(',')
				}
				out.String(string(v101))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v102, v103 := range in.Dependencies {
				if v102 > 0 {
					out.RawByte(',')
				}
				out.String(string(v103))
			}
			out.RawByte(']')
		}
	}
	if len(in.TestDependencies) != 0 {
		const prefix string = ",\"test_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v104, v105 := range in.TestDependencies {
				if v104 > 0 {
					out.RawByte(',')
				}
				out.String(string(v105))
			}
			out.RawByte(']')
		}
	}
	if len(in.RecommendedDependencies) != 0 {
		const prefix string = ",\"recommended_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v106, v107 := range in.RecommendedDependencies {
				if v106 > 0 {
					out.RawByte(',')
				}
				out.String(string(v107))
			}
			out.RawByte(']')
		}
	}
	if len(in.OptionalDependencies) != 0 {
		const prefix string = ",\"optional_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v108, v109 := range in.OptionalDependencies {
				if v108 > 0 {
					out.RawByte(',')
				}
				out.String(string(v109))
			}
			out.RawByte(']')
		}
	}
	if len(in.UsesFromMacOS) != 0 {
		const prefix string = ",\"uses_from_macos\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v110, v111 := range in.UsesFromMacOS {
				if v110 > 0 {
					out.RawByte(',')
				}
				if m, ok := v111.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v111.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v111))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.UsesFromMacOSBounds) != 0 {
		const prefix string = ",\"uses_from_macos_bounds\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v112, v113 := range in.UsesFromMacOSBounds {
				if v112 > 0 {
					out.RawByte(',')
				}
				if v113 == nil {
					out.RawString("null")
				} else {
					(*v113).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v114, v115 := range in.Requirements {
				if v114 > 0 {
					out.RawByte(',')
				}
				if v115 == nil {
					out.RawString("null")
				} else {
					(*v115).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.ConflictsWith) != 0 {
		const prefix string = ",\"conflicts_with\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v116, v117 := range in.ConflictsWith {
				if v116 > 0 {
					out.RawByte(',')
				}
				out.String(string(v117))
			}
			out.RawByte(']')
		}
	}
	if len(in.ConflictsWithReasons) != 0 {
		const prefix string = ",\"conflicts_with_reasons\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v118, v119 := range in.ConflictsWithReasons {
				if v118 > 0 {
					out.RawByte(',')
				}
				out.String(string(v119))
			}
			out.RawByte(']')
		}
	}
	if len(in.LinkOverwrite) != 0 {
		const prefix string = ",\"link_overwrite\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v120, v121 := range in.LinkOverwrite {
				if v120 > 0 {
					out.RawByte(',')
				}
				out.String(string(v121))
			}
			out.RawByte(']')
		}
	}
	if in.Caveats != nil {
		const prefix string = ",\"caveats\":"
		out.RawString(prefix)
		out.String(string(*in.Caveats))
	}
	if len(in.Installed) != 0 {
		const prefix string = ",\"installed\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v122, v123 := range in.Installed {
				if v122 > 0 {
					out.RawByte(',')
				}
				(v123).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.LinkedKeg != "" {
		const prefix string = ",\"linked_keg\":"
		out.RawString(prefix)
		out.String(string(in.LinkedKeg))
	}
	if in.Pinned {
		const prefix string = ",\"pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.Pinned))
	}
	if in.Outdated {
		const prefix string = ",\"outdated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Outdated))
	}
	if in.Deprecated {
		const prefix string = ",\"deprecated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Deprecated))
	}
	if in.DeprecationDate != nil {
		const prefix string = ",\"deprecation_date\":"
		out.RawString(prefix)
		out.String(string(*in.DeprecationDate))
	}
	if in.DeprecationReason != nil {
		const prefix string = ",\"deprecation_reason\":"
		out.RawString(prefix)
		out.String(string(*in.DeprecationReason))
	}
	if in.Disabled {
		const prefix string = ",\"disabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.Disabled))
	}
	if in.DisabledDate != nil {
		const prefix string = ",\"disable_date\":"
		out.RawString(prefix)
		out.String(string(*in.DisabledDate))
	}
	if in.DisabledReason != nil {
		const prefix string = ",\"disable_reason\":"
		out.RawString(prefix)
		out.String(string(*in.DisabledReason))
	}
	if in.PostInstallDefined {
		const prefix string = ",\"post_install_defined\":"
		out.RawString(prefix)
		out.Bool(bool(in.PostInstallDefined))
	}
	if in.Service != nil {
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		(*in.Service).MarshalEasyJSON(out)
	}
	if in.TapGitHead != "" {
		const prefix string = ",\"tap_git_head\":"
		out.RawString(prefix)
		out.String(string(in.TapGitHead))
	}
	if in.RubySourcePath != "" {
		const prefix string = ",\"ruby_source_path\":"
		out.RawString(prefix)
		out.String(string(in.RubySourcePath))
	}
	if len(in.RubySourceChecksum) != 0 {
		const prefix string = ",\"ruby_source_checksum\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v124First := true
			for v124Name, v124Value := range in.RubySourceChecksum {
				if v124First {
					v124First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v124Name))
				out.RawByte(':')
				out.String(string(v124Value))
			}
			out.RawByte('}')
		}
	}
	if in.HeadDependencies != nil {
		const prefix string = ",\"head_dependencies\":"
		out.RawString(prefix)
		(*in.HeadDependencies).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Info) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Info) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Info) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Info) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV16(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV17(in *jlexer.Lexer, out *Index) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Index, 0, 8)
			} else {
				*out = Index{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v125 *Info
			if in.IsNull() {
				in.Skip()
				v125 = nil
			} else {
				if v125 == nil {
					v125 = new(Info)
				}
				(*v125).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v125)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV17(out *jwriter.Writer, in Index) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v126, v127 := range in {
			if v126 > 0 {
				out.RawByte(',')
			}
			if v127 == nil {
				out.RawString("null")
			} else {
				(*v127).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Index) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Index) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Index) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Index) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV17(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV18(in *jlexer.Lexer, out *HeadDependencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "build_dependencies":
			if in.IsNull() {
				in.Skip()
				out.BuildDependencies = nil
			} else {
				in.Delim('[')
				if out.BuildDependencies == nil {
					if !in.IsDelim(']') {
						out.BuildDependencies = make([]string, 0, 4)
					} else {
						out.BuildDependencies = []string{}
					}
				} else {
					out.BuildDependencies = (out.BuildDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v128 string
					v128 = string(in.String())
					out.BuildDependencies = append(out.BuildDependencies, v128)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]string, 0, 4)
					} else {
						out.Dependencies = []string{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v129 string
					v129 = string(in.String())
					out.Dependencies = append(out.Dependencies, v129)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "test_dependencies":
			if in.IsNull() {
				in.Skip()
				out.TestDependencies = nil
			} else {
				in.Delim('[')
				if out.TestDependencies == nil {
					if !in.IsDelim(']') {
						out.TestDependencies = make([]string, 0, 4)
					} else {
						out.TestDependencies = []string{}
					}
				} else {
					out.TestDependencies = (out.TestDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v130 string
					v130 = string(in.String())
					out.TestDependencies = append(out.TestDependencies, v130)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "recommended_dependencies":
			if in.IsNull() {
				in.Skip()
				out.RecommendedDependencies = nil
			} else {
				in.Delim('[')
				if out.RecommendedDependencies == nil {
					if !in.IsDelim(']') {
						out.RecommendedDependencies = make([]string, 0, 4)
					} else {
						out.RecommendedDependencies = []string{}
					}
				} else {
					out.RecommendedDependencies = (out.RecommendedDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v131 string
					v131 = string(in.String())
					out.RecommendedDependencies = append(out.RecommendedDependencies, v131)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional_dependencies":
			if in.IsNull() {
				in.Skip()
				out.OptionalDependencies = nil
			} else {
				in.Delim('[')
				if out.OptionalDependencies == nil {
					if !in.IsDelim(']') {
						out.OptionalDependencies = make([]string, 0, 4)
					} else {
						out.OptionalDependencies = []string{}
					}
				} else {
					out.OptionalDependencies = (out.OptionalDependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v132 string
					v132 = string(in.String())
					out.OptionalDependencies = append(out.OptionalDependencies, v132)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uses_from_macos":
			if in.IsNull() {
				in.Skip()
				out.UsesFromMacOS = nil
			} else {
				in.Delim('[')
				if out.UsesFromMacOS == nil {
					if !in.IsDelim(']') {
						out.UsesFromMacOS = make([]interface{}, 0, 4)
					} else {
						out.UsesFromMacOS = []interface{}{}
					}
				} else {
					out.UsesFromMacOS = (out.UsesFromMacOS)[:0]
				}
				for !in.IsDelim(']') {
					var v133 interface{}
					if m, ok := v133.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v133.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v133 = in.Interface()
					}
					out.UsesFromMacOS = append(out.UsesFromMacOS, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uses_from_macos_bounds":
			if in.IsNull() {
				in.Skip()
				out.UsesFromMacOSBounds = nil
			} else {
				in.Delim('[')
				if out.UsesFromMacOSBounds == nil {
					if !in.IsDelim(']') {
						out.UsesFromMacOSBounds = make([]*MacOSBounds, 0, 8)
					} else {
						out.UsesFromMacOSBounds = []*MacOSBounds{}
					}
				} else {
					out.UsesFromMacOSBounds = (out.UsesFromMacOSBounds)[:0]
				}
				for !in.IsDelim(']') {
					var v134 *MacOSBounds
					if in.IsNull() {
						in.Skip()
						v134 = nil
					} else {
						if v134 == nil {
							v134 = new(MacOSBounds)
						}
						(*v134).UnmarshalEasyJSON(in)
					}
					out.UsesFromMacOSBounds = append(out.UsesFromMacOSBounds, v134)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV18(out *jwriter.Writer, in HeadDependencies) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.BuildDependencies) != 0 {
		const prefix string = ",\"build_dependencies\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v135, v136 := range in.BuildDependencies {
				if v135 > 0 {
					out.RawByte(',')
				}
				out.String(string(v136))
			}
			out.RawByte(']')
		}
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v137, v138 := range in.Dependencies {
				if v137 > 0 {
					out.RawByte(',')
				}
				out.String(string(v138))
			}
			out.RawByte(']')
		}
	}
	if len(in.TestDependencies) != 0 {
		const prefix string = ",\"test_dependencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v139, v140 := range in.TestDependencies {
				if v139 > 0 {
					out.RawByte(',')
				}
				out.String(string(v140))
			}
			out.RawByte(']')
		}
	}
	if len(in.RecommendedDependencies) != 0 {
		const prefix string = ",\"recommended_dependencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v141, v142 := range in.RecommendedDependencies {
				if v141 > 0 {
					out.RawByte(',')
				}
				out.String(string(v142))
			}
			out.RawByte(']')
		}
	}
	if len(in.OptionalDependencies) != 0 {
		const prefix string = ",\"optional_dependencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.OptionalDependencies {
				if v143 > 0 {
					out.RawByte(',')
				}
				out.String(string(v144))
			}
			out.RawByte(']')
		}
	}
	if len(in.UsesFromMacOS) != 0 {
		const prefix string = ",\"uses_from_macos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v145, v146 := range in.UsesFromMacOS {
				if v145 > 0 {
					out.RawByte(',')
				}
				if m, ok := v146.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v146.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v146))
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.UsesFromMacOSBounds) != 0 {
		const prefix string = ",\"uses_from_macos_bounds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v147, v148 := range in.UsesFromMacOSBounds {
				if v147 > 0 {
					out.RawByte(',')
				}
				if v148 == nil {
					out.RawString("null")
				} else {
					(*v148).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeadDependencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeadDependencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeadDependencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeadDependencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV18(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV19(in *jlexer.Lexer, out *FormulaURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "branch":
			out.Branch = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "revision":
			out.Revision = string(in.String())
		case "using":
			out.Using = string(in.String())
		case "checksum":
			out.Checksum = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV19(out *jwriter.Writer, in FormulaURL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Branch != "" {
		const prefix string = ",\"branch\":"
		out.RawString(prefix)
		out.String(string(in.Branch))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	if in.Revision != "" {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.String(string(in.Revision))
	}
	if in.Using != "" {
		const prefix string = ",\"using\":"
		out.RawString(prefix)
		out.String(string(in.Using))
	}
	if in.Checksum != "" {
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.String(string(in.Checksum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FormulaURL) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FormulaURL) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FormulaURL) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FormulaURL) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV19(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV110(in *jlexer.Lexer, out *BottleFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cellar":
			out.Cellar = string(in.StringIntern())
		case "url":
			out.URL = string(in.String())
		case "sha256":
			out.Sha256 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV110(out *jwriter.Writer, in BottleFile) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Cellar != "" {
		const prefix string = ",\"cellar\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Cellar))
	}
	if in.URL != "" {
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.URL))
	}
	if in.Sha256 != "" {
		const prefix string = ",\"sha256\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sha256))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BottleFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BottleFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BottleFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BottleFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV110(l, v)
}
func easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV111(in *jlexer.Lexer, out *Bottle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rebuild":
			out.Rebuild = int(in.Int())
		case "root_url":
			out.RootURL = string(in.StringIntern())
		case "files":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Files = make(map[platform.Platform]*BottleFile)
				} else {
					out.Files = nil
				}
				for !in.IsDelim('}') {
					key := platform.Platform(in.String())
					in.WantColon()
					var v149 *BottleFile
					if in.IsNull() {
						in.Skip()
						v149 = nil
					} else {
						if v149 == nil {
							v149 = new(BottleFile)
						}
						(*v149).UnmarshalEasyJSON(in)
					}
					(out.Files)[key] = v149
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV111(out *jwriter.Writer, in Bottle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Rebuild != 0 {
		const prefix string = ",\"rebuild\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Rebuild))
	}
	if in.RootURL != "" {
		const prefix string = ",\"root_url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RootURL))
	}
	if len(in.Files) != 0 {
		const prefix string = ",\"files\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v150First := true
			for v150Name, v150Value := range in.Files {
				if v150First {
					v150First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v150Name))
				out.RawByte(':')
				if v150Value == nil {
					out.RawString("null")
				} else {
					(*v150Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bottle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bottle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson102f8a2fEncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bottle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bottle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson102f8a2fDecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV111(l, v)
}
