// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v3

import (
	json "encoding/json"
	common "github.com/act3-ai/hops/internal/apis/formulae.brew.sh/common"
	platform "github.com/act3-ai/hops/internal/platform"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV3(in *jlexer.Lexer, out *Variation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caveats":
			out.Caveats = string(in.String())
		case "dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dependencies = make(Dependencies)
				} else {
					out.Dependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *DependencyConfig
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(DependencyConfig)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Dependencies)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "head_dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HeadDependencies = make(Dependencies)
				} else {
					out.HeadDependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 *DependencyConfig
					if in.IsNull() {
						in.Skip()
						v2 = nil
					} else {
						if v2 == nil {
							v2 = new(DependencyConfig)
						}
						(*v2).UnmarshalEasyJSON(in)
					}
					(out.HeadDependencies)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make([]Requirement, 0, 0)
					} else {
						out.Requirements = []Requirement{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Requirement
					(v3).UnmarshalEasyJSON(in)
					out.Requirements = append(out.Requirements, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Conflicts":
			(out.Conflicts).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV3(out *jwriter.Writer, in Variation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caveats != "" {
		const prefix string = ",\"caveats\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Caveats))
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Dependencies {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				if v4Value == nil {
					out.RawString("null")
				} else {
					(*v4Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.HeadDependencies) != 0 {
		const prefix string = ",\"head_dependencies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.HeadDependencies {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if v5Value == nil {
					out.RawString("null")
				} else {
					(*v5Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v6, v7 := range in.Requirements {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Conflicts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Conflicts).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Variation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Variation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Variation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Variation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV3(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV31(in *jlexer.Lexer, out *URLSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "verified":
			out.Verified = string(in.String())
		case "using":
			out.Using = string(in.String())
		case "cookies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Cookies = make(map[string]string)
				} else {
					out.Cookies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.Cookies)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "referer":
			out.Referer = string(in.String())
		case "header":
			if m, ok := out.Header.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Header.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Header = in.Interface()
			}
		case "user_agent":
			out.UserAgent = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Data = make(map[string]string)
				} else {
					out.Data = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.Data)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV31(out *jwriter.Writer, in URLSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Verified != "" {
		const prefix string = ",\"verified\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Verified))
	}
	if in.Using != "" {
		const prefix string = ",\"using\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Using))
	}
	if len(in.Cookies) != 0 {
		const prefix string = ",\"cookies\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Cookies {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	if in.Referer != "" {
		const prefix string = ",\"referer\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Referer))
	}
	if in.Header != nil {
		const prefix string = ",\"header\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Header.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Header.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Header))
		}
	}
	if in.UserAgent != "" {
		const prefix string = ",\"user_agent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAgent))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Data {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v URLSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v URLSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *URLSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *URLSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV31(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV32(in *jlexer.Lexer, out *Tap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tap_git_head":
			out.TapGitHead = string(in.String())
		case "aliases":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Aliases = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v12 string
					v12 = string(in.String())
					(out.Aliases)[key] = v12
					in.WantComma()
				}
				in.Delim('}')
			}
		case "renames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Renames = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v13 string
					v13 = string(in.String())
					(out.Renames)[key] = v13
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tap_migrations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.TapMigrations = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 string
					v14 = string(in.String())
					(out.TapMigrations)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		case "formulae":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Formulae = make(map[string]Formula)
				} else {
					out.Formulae = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v15 Formula
					(v15).UnmarshalEasyJSON(in)
					(out.Formulae)[key] = v15
					in.WantComma()
				}
				in.Delim('}')
			}
		case "casks":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Casks = make(map[string]Cask)
				} else {
					out.Casks = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 Cask
					(v16).UnmarshalEasyJSON(in)
					(out.Casks)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV32(out *jwriter.Writer, in Tap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"tap_git_head\":"
		out.RawString(prefix[1:])
		out.String(string(in.TapGitHead))
	}
	{
		const prefix string = ",\"aliases\":"
		out.RawString(prefix)
		if in.Aliases == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.Aliases {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"renames\":"
		out.RawString(prefix)
		if in.Renames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Renames {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"tap_migrations\":"
		out.RawString(prefix)
		if in.TapMigrations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.TapMigrations {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				out.String(string(v19Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Formulae) != 0 {
		const prefix string = ",\"formulae\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v20First := true
			for v20Name, v20Value := range in.Formulae {
				if v20First {
					v20First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v20Name))
				out.RawByte(':')
				(v20Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.Casks) != 0 {
		const prefix string = ",\"casks\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v21First := true
			for v21Name, v21Value := range in.Casks {
				if v21First {
					v21First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v21Name))
				out.RawByte(':')
				(v21Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Tap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Tap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Tap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Tap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV32(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV33(in *jlexer.Lexer, out *Signature) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "protected":
			out.Protected = string(in.String())
		case "header":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Header = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v22 string
					v22 = string(in.String())
					(out.Header)[key] = v22
					in.WantComma()
				}
				in.Delim('}')
			}
		case "signature":
			out.Signature = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV33(out *jwriter.Writer, in Signature) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"protected\":"
		out.RawString(prefix[1:])
		out.String(string(in.Protected))
	}
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		if in.Header == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.Header {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				out.String(string(v23Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"signature\":"
		out.RawString(prefix)
		out.String(string(in.Signature))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Signature) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Signature) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Signature) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Signature) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV33(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV34(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "payload":
			(out.Payload).UnmarshalEasyJSON(in)
		case "signatures":
			if in.IsNull() {
				in.Skip()
				out.Signatures = nil
			} else {
				in.Delim('[')
				if out.Signatures == nil {
					if !in.IsDelim(']') {
						out.Signatures = make([]Signature, 0, 1)
					} else {
						out.Signatures = []Signature{}
					}
				} else {
					out.Signatures = (out.Signatures)[:0]
				}
				for !in.IsDelim(']') {
					var v24 Signature
					(v24).UnmarshalEasyJSON(in)
					out.Signatures = append(out.Signatures, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV34(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix[1:])
		(in.Payload).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"signatures\":"
		out.RawString(prefix)
		if in.Signatures == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.Signatures {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV34(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV35(in *jlexer.Lexer, out *Requirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "cask":
			if m, ok := out.Cask.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Cask.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Cask = in.Interface()
			}
		case "download":
			if m, ok := out.Download.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Download.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Download = in.Interface()
			}
		case "version":
			if in.IsNull() {
				in.Skip()
				out.Version = nil
			} else {
				if out.Version == nil {
					out.Version = new(string)
				}
				*out.Version = string(in.String())
			}
		case "contexts":
			if in.IsNull() {
				in.Skip()
				out.Contexts = nil
			} else {
				in.Delim('[')
				if out.Contexts == nil {
					if !in.IsDelim(']') {
						out.Contexts = make([]string, 0, 4)
					} else {
						out.Contexts = []string{}
					}
				} else {
					out.Contexts = (out.Contexts)[:0]
				}
				for !in.IsDelim(']') {
					var v27 string
					v27 = string(in.String())
					out.Contexts = append(out.Contexts, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "specs":
			if in.IsNull() {
				in.Skip()
				out.Specs = nil
			} else {
				in.Delim('[')
				if out.Specs == nil {
					if !in.IsDelim(']') {
						out.Specs = make([]string, 0, 4)
					} else {
						out.Specs = []string{}
					}
				} else {
					out.Specs = (out.Specs)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Specs = append(out.Specs, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV35(out *jwriter.Writer, in Requirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"cask\":"
		out.RawString(prefix)
		if m, ok := in.Cask.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Cask.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Cask))
		}
	}
	{
		const prefix string = ",\"download\":"
		out.RawString(prefix)
		if m, ok := in.Download.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Download.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Download))
		}
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		if in.Version == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Version))
		}
	}
	{
		const prefix string = ",\"contexts\":"
		out.RawString(prefix)
		if in.Contexts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Contexts {
				if v29 > 0 {
					out.RawByte(',')
				}
				out.String(string(v30))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"specs\":"
		out.RawString(prefix)
		if in.Specs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Specs {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Requirement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Requirement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Requirement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Requirement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV35(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV36(in *jlexer.Lexer, out *PlatformFormula) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "desc":
			out.Desc = string(in.String())
		case "license":
			out.License = string(in.String())
		case "homepage":
			out.Homepage = string(in.String())
		case "urls":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.URLs = make(map[string]struct {
					URL      string `json:"url"`
					Revision string `json:"revision,omitempty"`
					Tag      string `json:"tag,omitempty"`
					Branch   string `json:"branch,omitempty"`
					Using    string `json:"using,omitempty"`
					Checksum string `json:"checksum,omitempty"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v33 struct {
						URL      string `json:"url"`
						Revision string `json:"revision,omitempty"`
						Tag      string `json:"tag,omitempty"`
						Branch   string `json:"branch,omitempty"`
						Using    string `json:"using,omitempty"`
						Checksum string `json:"checksum,omitempty"`
					}
					easyjson66105549Decode(in, &v33)
					(out.URLs)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		case "post_install_defined":
			out.PostInstallDefined = bool(in.Bool())
		case "ruby_source_path":
			out.RubySourcePath = string(in.String())
		case "ruby_source_sha256":
			out.RubySourceSHA256 = string(in.String())
		case "link_overwrite":
			if in.IsNull() {
				in.Skip()
				out.LinkOverwrite = nil
			} else {
				in.Delim('[')
				if out.LinkOverwrite == nil {
					if !in.IsDelim(']') {
						out.LinkOverwrite = make([]string, 0, 4)
					} else {
						out.LinkOverwrite = []string{}
					}
				} else {
					out.LinkOverwrite = (out.LinkOverwrite)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.LinkOverwrite = append(out.LinkOverwrite, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "revision":
			out.Revision = int(in.Int())
		case "keg_only_reason":
			(out.KegOnlyReason).UnmarshalEasyJSON(in)
		case "pour_bottle_only_if":
			out.PourBottleOnlyIf = string(in.String())
		case "caveats":
			out.Caveats = string(in.String())
		case "service":
			(out.Service).UnmarshalEasyJSON(in)
		case "version_scheme":
			out.VersionScheme = int(in.Int())
		case "version":
			out.Version = string(in.String())
		case "bottle":
			(out.Bottle).UnmarshalEasyJSON(in)
		case "versioned_formulae":
			if in.IsNull() {
				in.Skip()
				out.VersionedFormulae = nil
			} else {
				in.Delim('[')
				if out.VersionedFormulae == nil {
					if !in.IsDelim(']') {
						out.VersionedFormulae = make([]string, 0, 4)
					} else {
						out.VersionedFormulae = []string{}
					}
				} else {
					out.VersionedFormulae = (out.VersionedFormulae)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.VersionedFormulae = append(out.VersionedFormulae, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deprecation_date":
			out.DeprecationDate = string(in.String())
		case "deprecation_reason":
			out.DeprecationReason = string(in.String())
		case "disable_date":
			out.DisabledDate = string(in.String())
		case "disable_reason":
			out.DisabledReason = string(in.String())
		case "dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dependencies = make(Dependencies)
				} else {
					out.Dependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v36 *DependencyConfig
					if in.IsNull() {
						in.Skip()
						v36 = nil
					} else {
						if v36 == nil {
							v36 = new(DependencyConfig)
						}
						(*v36).UnmarshalEasyJSON(in)
					}
					(out.Dependencies)[key] = v36
					in.WantComma()
				}
				in.Delim('}')
			}
		case "head_dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HeadDependencies = make(Dependencies)
				} else {
					out.HeadDependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v37 *DependencyConfig
					if in.IsNull() {
						in.Skip()
						v37 = nil
					} else {
						if v37 == nil {
							v37 = new(DependencyConfig)
						}
						(*v37).UnmarshalEasyJSON(in)
					}
					(out.HeadDependencies)[key] = v37
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make([]Requirement, 0, 0)
					} else {
						out.Requirements = []Requirement{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v38 Requirement
					(v38).UnmarshalEasyJSON(in)
					out.Requirements = append(out.Requirements, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Conflicts":
			(out.Conflicts).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV36(out *jwriter.Writer, in PlatformFormula) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix[1:])
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		out.String(string(in.License))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.URLs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v39First := true
			for v39Name, v39Value := range in.URLs {
				if v39First {
					v39First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v39Name))
				out.RawByte(':')
				easyjson66105549Encode(out, v39Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"post_install_defined\":"
		out.RawString(prefix)
		out.Bool(bool(in.PostInstallDefined))
	}
	{
		const prefix string = ",\"ruby_source_path\":"
		out.RawString(prefix)
		out.String(string(in.RubySourcePath))
	}
	{
		const prefix string = ",\"ruby_source_sha256\":"
		out.RawString(prefix)
		out.String(string(in.RubySourceSHA256))
	}
	if len(in.LinkOverwrite) != 0 {
		const prefix string = ",\"link_overwrite\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v40, v41 := range in.LinkOverwrite {
				if v40 > 0 {
					out.RawByte(',')
				}
				out.String(string(v41))
			}
			out.RawByte(']')
		}
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.Int(int(in.Revision))
	}
	if true {
		const prefix string = ",\"keg_only_reason\":"
		out.RawString(prefix)
		(in.KegOnlyReason).MarshalEasyJSON(out)
	}
	if in.PourBottleOnlyIf != "" {
		const prefix string = ",\"pour_bottle_only_if\":"
		out.RawString(prefix)
		out.String(string(in.PourBottleOnlyIf))
	}
	if in.Caveats != "" {
		const prefix string = ",\"caveats\":"
		out.RawString(prefix)
		out.String(string(in.Caveats))
	}
	if true {
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		(in.Service).MarshalEasyJSON(out)
	}
	if in.VersionScheme != 0 {
		const prefix string = ",\"version_scheme\":"
		out.RawString(prefix)
		out.Int(int(in.VersionScheme))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"bottle\":"
		out.RawString(prefix)
		(in.Bottle).MarshalEasyJSON(out)
	}
	if len(in.VersionedFormulae) != 0 {
		const prefix string = ",\"versioned_formulae\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v42, v43 := range in.VersionedFormulae {
				if v42 > 0 {
					out.RawByte(',')
				}
				out.String(string(v43))
			}
			out.RawByte(']')
		}
	}
	if in.DeprecationDate != "" {
		const prefix string = ",\"deprecation_date\":"
		out.RawString(prefix)
		out.String(string(in.DeprecationDate))
	}
	if in.DeprecationReason != "" {
		const prefix string = ",\"deprecation_reason\":"
		out.RawString(prefix)
		out.String(string(in.DeprecationReason))
	}
	if in.DisabledDate != "" {
		const prefix string = ",\"disable_date\":"
		out.RawString(prefix)
		out.String(string(in.DisabledDate))
	}
	if in.DisabledReason != "" {
		const prefix string = ",\"disable_reason\":"
		out.RawString(prefix)
		out.String(string(in.DisabledReason))
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v44First := true
			for v44Name, v44Value := range in.Dependencies {
				if v44First {
					v44First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v44Name))
				out.RawByte(':')
				if v44Value == nil {
					out.RawString("null")
				} else {
					(*v44Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.HeadDependencies) != 0 {
		const prefix string = ",\"head_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v45First := true
			for v45Name, v45Value := range in.HeadDependencies {
				if v45First {
					v45First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v45Name))
				out.RawByte(':')
				if v45Value == nil {
					out.RawString("null")
				} else {
					(*v45Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v46, v47 := range in.Requirements {
				if v46 > 0 {
					out.RawByte(',')
				}
				(v47).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Conflicts\":"
		out.RawString(prefix)
		(in.Conflicts).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PlatformFormula) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PlatformFormula) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PlatformFormula) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PlatformFormula) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV36(l, v)
}
func easyjson66105549Decode(in *jlexer.Lexer, out *struct {
	URL      string `json:"url"`
	Revision string `json:"revision,omitempty"`
	Tag      string `json:"tag,omitempty"`
	Branch   string `json:"branch,omitempty"`
	Using    string `json:"using,omitempty"`
	Checksum string `json:"checksum,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "revision":
			out.Revision = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "branch":
			out.Branch = string(in.String())
		case "using":
			out.Using = string(in.String())
		case "checksum":
			out.Checksum = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549Encode(out *jwriter.Writer, in struct {
	URL      string `json:"url"`
	Revision string `json:"revision,omitempty"`
	Tag      string `json:"tag,omitempty"`
	Branch   string `json:"branch,omitempty"`
	Using    string `json:"using,omitempty"`
	Checksum string `json:"checksum,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.Revision != "" {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.String(string(in.Revision))
	}
	if in.Tag != "" {
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	if in.Branch != "" {
		const prefix string = ",\"branch\":"
		out.RawString(prefix)
		out.String(string(in.Branch))
	}
	if in.Using != "" {
		const prefix string = ",\"using\":"
		out.RawString(prefix)
		out.String(string(in.Using))
	}
	if in.Checksum != "" {
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.String(string(in.Checksum))
	}
	out.RawByte('}')
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV37(in *jlexer.Lexer, out *MacOSBounds) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "since":
			out.Since = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV37(out *jwriter.Writer, in MacOSBounds) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Since != "" {
		const prefix string = ",\"since\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Since))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MacOSBounds) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MacOSBounds) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MacOSBounds) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MacOSBounds) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV37(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV38(in *jlexer.Lexer, out *Formula) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "variations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Variations = make(map[platform.Platform]PlatformFormula)
				for !in.IsDelim('}') {
					key := platform.Platform(in.String())
					in.WantColon()
					var v48 PlatformFormula
					(v48).UnmarshalEasyJSON(in)
					(out.Variations)[key] = v48
					in.WantComma()
				}
				in.Delim('}')
			}
		case "desc":
			out.Desc = string(in.String())
		case "license":
			out.License = string(in.String())
		case "homepage":
			out.Homepage = string(in.String())
		case "urls":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.URLs = make(map[string]struct {
					URL      string `json:"url"`
					Revision string `json:"revision,omitempty"`
					Tag      string `json:"tag,omitempty"`
					Branch   string `json:"branch,omitempty"`
					Using    string `json:"using,omitempty"`
					Checksum string `json:"checksum,omitempty"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v49 struct {
						URL      string `json:"url"`
						Revision string `json:"revision,omitempty"`
						Tag      string `json:"tag,omitempty"`
						Branch   string `json:"branch,omitempty"`
						Using    string `json:"using,omitempty"`
						Checksum string `json:"checksum,omitempty"`
					}
					easyjson66105549Decode(in, &v49)
					(out.URLs)[key] = v49
					in.WantComma()
				}
				in.Delim('}')
			}
		case "post_install_defined":
			out.PostInstallDefined = bool(in.Bool())
		case "ruby_source_path":
			out.RubySourcePath = string(in.String())
		case "ruby_source_sha256":
			out.RubySourceSHA256 = string(in.String())
		case "link_overwrite":
			if in.IsNull() {
				in.Skip()
				out.LinkOverwrite = nil
			} else {
				in.Delim('[')
				if out.LinkOverwrite == nil {
					if !in.IsDelim(']') {
						out.LinkOverwrite = make([]string, 0, 4)
					} else {
						out.LinkOverwrite = []string{}
					}
				} else {
					out.LinkOverwrite = (out.LinkOverwrite)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.LinkOverwrite = append(out.LinkOverwrite, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "revision":
			out.Revision = int(in.Int())
		case "keg_only_reason":
			(out.KegOnlyReason).UnmarshalEasyJSON(in)
		case "pour_bottle_only_if":
			out.PourBottleOnlyIf = string(in.String())
		case "caveats":
			out.Caveats = string(in.String())
		case "service":
			(out.Service).UnmarshalEasyJSON(in)
		case "version_scheme":
			out.VersionScheme = int(in.Int())
		case "version":
			out.Version = string(in.String())
		case "bottle":
			(out.Bottle).UnmarshalEasyJSON(in)
		case "versioned_formulae":
			if in.IsNull() {
				in.Skip()
				out.VersionedFormulae = nil
			} else {
				in.Delim('[')
				if out.VersionedFormulae == nil {
					if !in.IsDelim(']') {
						out.VersionedFormulae = make([]string, 0, 4)
					} else {
						out.VersionedFormulae = []string{}
					}
				} else {
					out.VersionedFormulae = (out.VersionedFormulae)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.VersionedFormulae = append(out.VersionedFormulae, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "deprecation_date":
			out.DeprecationDate = string(in.String())
		case "deprecation_reason":
			out.DeprecationReason = string(in.String())
		case "disable_date":
			out.DisabledDate = string(in.String())
		case "disable_reason":
			out.DisabledReason = string(in.String())
		case "dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dependencies = make(Dependencies)
				} else {
					out.Dependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 *DependencyConfig
					if in.IsNull() {
						in.Skip()
						v52 = nil
					} else {
						if v52 == nil {
							v52 = new(DependencyConfig)
						}
						(*v52).UnmarshalEasyJSON(in)
					}
					(out.Dependencies)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "head_dependencies":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.HeadDependencies = make(Dependencies)
				} else {
					out.HeadDependencies = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v53 *DependencyConfig
					if in.IsNull() {
						in.Skip()
						v53 = nil
					} else {
						if v53 == nil {
							v53 = new(DependencyConfig)
						}
						(*v53).UnmarshalEasyJSON(in)
					}
					(out.HeadDependencies)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requirements":
			if in.IsNull() {
				in.Skip()
				out.Requirements = nil
			} else {
				in.Delim('[')
				if out.Requirements == nil {
					if !in.IsDelim(']') {
						out.Requirements = make([]Requirement, 0, 0)
					} else {
						out.Requirements = []Requirement{}
					}
				} else {
					out.Requirements = (out.Requirements)[:0]
				}
				for !in.IsDelim(']') {
					var v54 Requirement
					(v54).UnmarshalEasyJSON(in)
					out.Requirements = append(out.Requirements, v54)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Conflicts":
			(out.Conflicts).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV38(out *jwriter.Writer, in Formula) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"variations\":"
		out.RawString(prefix[1:])
		if in.Variations == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.Variations {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				(v55Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"license\":"
		out.RawString(prefix)
		out.String(string(in.License))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.URLs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v56First := true
			for v56Name, v56Value := range in.URLs {
				if v56First {
					v56First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v56Name))
				out.RawByte(':')
				easyjson66105549Encode(out, v56Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"post_install_defined\":"
		out.RawString(prefix)
		out.Bool(bool(in.PostInstallDefined))
	}
	{
		const prefix string = ",\"ruby_source_path\":"
		out.RawString(prefix)
		out.String(string(in.RubySourcePath))
	}
	{
		const prefix string = ",\"ruby_source_sha256\":"
		out.RawString(prefix)
		out.String(string(in.RubySourceSHA256))
	}
	if len(in.LinkOverwrite) != 0 {
		const prefix string = ",\"link_overwrite\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v57, v58 := range in.LinkOverwrite {
				if v57 > 0 {
					out.RawByte(',')
				}
				out.String(string(v58))
			}
			out.RawByte(']')
		}
	}
	if in.Revision != 0 {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.Int(int(in.Revision))
	}
	if true {
		const prefix string = ",\"keg_only_reason\":"
		out.RawString(prefix)
		(in.KegOnlyReason).MarshalEasyJSON(out)
	}
	if in.PourBottleOnlyIf != "" {
		const prefix string = ",\"pour_bottle_only_if\":"
		out.RawString(prefix)
		out.String(string(in.PourBottleOnlyIf))
	}
	if in.Caveats != "" {
		const prefix string = ",\"caveats\":"
		out.RawString(prefix)
		out.String(string(in.Caveats))
	}
	if true {
		const prefix string = ",\"service\":"
		out.RawString(prefix)
		(in.Service).MarshalEasyJSON(out)
	}
	if in.VersionScheme != 0 {
		const prefix string = ",\"version_scheme\":"
		out.RawString(prefix)
		out.Int(int(in.VersionScheme))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"bottle\":"
		out.RawString(prefix)
		(in.Bottle).MarshalEasyJSON(out)
	}
	if len(in.VersionedFormulae) != 0 {
		const prefix string = ",\"versioned_formulae\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v59, v60 := range in.VersionedFormulae {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.String(string(v60))
			}
			out.RawByte(']')
		}
	}
	if in.DeprecationDate != "" {
		const prefix string = ",\"deprecation_date\":"
		out.RawString(prefix)
		out.String(string(in.DeprecationDate))
	}
	if in.DeprecationReason != "" {
		const prefix string = ",\"deprecation_reason\":"
		out.RawString(prefix)
		out.String(string(in.DeprecationReason))
	}
	if in.DisabledDate != "" {
		const prefix string = ",\"disable_date\":"
		out.RawString(prefix)
		out.String(string(in.DisabledDate))
	}
	if in.DisabledReason != "" {
		const prefix string = ",\"disable_reason\":"
		out.RawString(prefix)
		out.String(string(in.DisabledReason))
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v61First := true
			for v61Name, v61Value := range in.Dependencies {
				if v61First {
					v61First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v61Name))
				out.RawByte(':')
				if v61Value == nil {
					out.RawString("null")
				} else {
					(*v61Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.HeadDependencies) != 0 {
		const prefix string = ",\"head_dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v62First := true
			for v62Name, v62Value := range in.HeadDependencies {
				if v62First {
					v62First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v62Name))
				out.RawByte(':')
				if v62Value == nil {
					out.RawString("null")
				} else {
					(*v62Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	if len(in.Requirements) != 0 {
		const prefix string = ",\"requirements\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v63, v64 := range in.Requirements {
				if v63 > 0 {
					out.RawByte(',')
				}
				(v64).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Conflicts\":"
		out.RawString(prefix)
		(in.Conflicts).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Formula) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Formula) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Formula) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Formula) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV38(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV39(in *jlexer.Lexer, out *DependencyConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v65 string
					v65 = string(in.String())
					out.Tags = append(out.Tags, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "uses_from_macos":
			if in.IsNull() {
				in.Skip()
				out.UsesFromMacOS = nil
			} else {
				if out.UsesFromMacOS == nil {
					out.UsesFromMacOS = new(MacOSBounds)
				}
				(*out.UsesFromMacOS).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV39(out *jwriter.Writer, in DependencyConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v66, v67 := range in.Tags {
				if v66 > 0 {
					out.RawByte(',')
				}
				out.String(string(v67))
			}
			out.RawByte(']')
		}
	}
	if in.UsesFromMacOS != nil {
		const prefix string = ",\"uses_from_macos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.UsesFromMacOS).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DependencyConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DependencyConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DependencyConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DependencyConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV39(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV310(in *jlexer.Lexer, out *Conflicts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "conflicts_with":
			if in.IsNull() {
				in.Skip()
				out.ConflictsWith = nil
			} else {
				in.Delim('[')
				if out.ConflictsWith == nil {
					if !in.IsDelim(']') {
						out.ConflictsWith = make([]string, 0, 4)
					} else {
						out.ConflictsWith = []string{}
					}
				} else {
					out.ConflictsWith = (out.ConflictsWith)[:0]
				}
				for !in.IsDelim(']') {
					var v68 string
					v68 = string(in.String())
					out.ConflictsWith = append(out.ConflictsWith, v68)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conflicts_with_reasons":
			if in.IsNull() {
				in.Skip()
				out.ConflictsWithReasons = nil
			} else {
				in.Delim('[')
				if out.ConflictsWithReasons == nil {
					if !in.IsDelim(']') {
						out.ConflictsWithReasons = make([]string, 0, 4)
					} else {
						out.ConflictsWithReasons = []string{}
					}
				} else {
					out.ConflictsWithReasons = (out.ConflictsWithReasons)[:0]
				}
				for !in.IsDelim(']') {
					var v69 string
					v69 = string(in.String())
					out.ConflictsWithReasons = append(out.ConflictsWithReasons, v69)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV310(out *jwriter.Writer, in Conflicts) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.ConflictsWith) != 0 {
		const prefix string = ",\"conflicts_with\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v70, v71 := range in.ConflictsWith {
				if v70 > 0 {
					out.RawByte(',')
				}
				out.String(string(v71))
			}
			out.RawByte(']')
		}
	}
	if len(in.ConflictsWithReasons) != 0 {
		const prefix string = ",\"conflicts_with_reasons\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.ConflictsWithReasons {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conflicts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV310(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conflicts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV310(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conflicts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV310(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conflicts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV310(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV311(in *jlexer.Lexer, out *Cask) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "token":
			out.Token = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "desc":
			out.Description = string(in.String())
		case "homepage":
			out.Homepage = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "sha256":
			out.Sha256 = string(in.String())
		case "artifacts":
			if in.IsNull() {
				in.Skip()
				out.Artifacts = nil
			} else {
				in.Delim('[')
				if out.Artifacts == nil {
					if !in.IsDelim(']') {
						out.Artifacts = make([]common.CaskArtifact, 0, 8)
					} else {
						out.Artifacts = []common.CaskArtifact{}
					}
				} else {
					out.Artifacts = (out.Artifacts)[:0]
				}
				for !in.IsDelim(']') {
					var v74 common.CaskArtifact
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v74 = make(common.CaskArtifact)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v75 []interface{}
							if in.IsNull() {
								in.Skip()
								v75 = nil
							} else {
								in.Delim('[')
								if v75 == nil {
									if !in.IsDelim(']') {
										v75 = make([]interface{}, 0, 4)
									} else {
										v75 = []interface{}{}
									}
								} else {
									v75 = (v75)[:0]
								}
								for !in.IsDelim(']') {
									var v76 interface{}
									if m, ok := v76.(easyjson.Unmarshaler); ok {
										m.UnmarshalEasyJSON(in)
									} else if m, ok := v76.(json.Unmarshaler); ok {
										_ = m.UnmarshalJSON(in.Raw())
									} else {
										v76 = in.Interface()
									}
									v75 = append(v75, v76)
									in.WantComma()
								}
								in.Delim(']')
							}
							(v74)[key] = v75
							in.WantComma()
						}
						in.Delim('}')
					}
					out.Artifacts = append(out.Artifacts, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ruby_source_path":
			out.RubySourcePath = string(in.String())
		case "ruby_source_sha256":
			out.RubySourceSHA256 = string(in.String())
		case "url_specs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.URLSpecs = make(map[string]URLSpec)
				} else {
					out.URLSpecs = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v77 URLSpec
					(v77).UnmarshalEasyJSON(in)
					(out.URLSpecs)[key] = v77
					in.WantComma()
				}
				in.Delim('}')
			}
		case "depends_on":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.DependsOn = make(map[string]common.CaskDependencies)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v78 common.CaskDependencies
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v78 = make(common.CaskDependencies)
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v79 []string
							if in.IsNull() {
								in.Skip()
								v79 = nil
							} else {
								in.Delim('[')
								if v79 == nil {
									if !in.IsDelim(']') {
										v79 = make([]string, 0, 4)
									} else {
										v79 = []string{}
									}
								} else {
									v79 = (v79)[:0]
								}
								for !in.IsDelim(']') {
									var v80 string
									v80 = string(in.String())
									v79 = append(v79, v80)
									in.WantComma()
								}
								in.Delim(']')
							}
							(v78)[key] = v79
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.DependsOn)[key] = v78
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV311(out *jwriter.Writer, in Cask) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix[1:])
		out.String(string(in.Token))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"homepage\":"
		out.RawString(prefix)
		out.String(string(in.Homepage))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"sha256\":"
		out.RawString(prefix)
		out.String(string(in.Sha256))
	}
	{
		const prefix string = ",\"artifacts\":"
		out.RawString(prefix)
		if in.Artifacts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v81, v82 := range in.Artifacts {
				if v81 > 0 {
					out.RawByte(',')
				}
				if v82 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v83First := true
					for v83Name, v83Value := range v82 {
						if v83First {
							v83First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v83Name))
						out.RawByte(':')
						if v83Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v84, v85 := range v83Value {
								if v84 > 0 {
									out.RawByte(',')
								}
								if m, ok := v85.(easyjson.Marshaler); ok {
									m.MarshalEasyJSON(out)
								} else if m, ok := v85.(json.Marshaler); ok {
									out.Raw(m.MarshalJSON())
								} else {
									out.Raw(json.Marshal(v85))
								}
							}
							out.RawByte(']')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ruby_source_path\":"
		out.RawString(prefix)
		out.String(string(in.RubySourcePath))
	}
	{
		const prefix string = ",\"ruby_source_sha256\":"
		out.RawString(prefix)
		out.String(string(in.RubySourceSHA256))
	}
	if len(in.URLSpecs) != 0 {
		const prefix string = ",\"url_specs\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v86First := true
			for v86Name, v86Value := range in.URLSpecs {
				if v86First {
					v86First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v86Name))
				out.RawByte(':')
				(v86Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"depends_on\":"
		out.RawString(prefix)
		if in.DependsOn == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v87First := true
			for v87Name, v87Value := range in.DependsOn {
				if v87First {
					v87First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v87Name))
				out.RawByte(':')
				if v87Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v88First := true
					for v88Name, v88Value := range v87Value {
						if v88First {
							v88First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v88Name))
						out.RawByte(':')
						if v88Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v89, v90 := range v88Value {
								if v89 > 0 {
									out.RawByte(',')
								}
								out.String(string(v90))
							}
							out.RawByte(']')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cask) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV311(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cask) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV311(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cask) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV311(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cask) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV311(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV312(in *jlexer.Lexer, out *BottleFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cellar":
			out.Cellar = string(in.String())
		case "sha256":
			out.Sha256 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV312(out *jwriter.Writer, in BottleFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cellar\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cellar))
	}
	{
		const prefix string = ",\"sha256\":"
		out.RawString(prefix)
		out.String(string(in.Sha256))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BottleFile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV312(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BottleFile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV312(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BottleFile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV312(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BottleFile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV312(l, v)
}
func easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV313(in *jlexer.Lexer, out *Bottle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rebuild":
			out.Rebuild = int(in.Int())
		case "root_url":
			out.RootURL = string(in.String())
		case "files":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Files = make(map[platform.Platform]BottleFile)
				for !in.IsDelim('}') {
					key := platform.Platform(in.String())
					in.WantColon()
					var v91 BottleFile
					(v91).UnmarshalEasyJSON(in)
					(out.Files)[key] = v91
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV313(out *jwriter.Writer, in Bottle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rebuild\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Rebuild))
	}
	{
		const prefix string = ",\"root_url\":"
		out.RawString(prefix)
		out.String(string(in.RootURL))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		if in.Files == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v92First := true
			for v92Name, v92Value := range in.Files {
				if v92First {
					v92First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v92Name))
				out.RawByte(':')
				(v92Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bottle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV313(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bottle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66105549EncodeGithubComAct3AiHopsInternalApisFormulaeBrewShV313(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bottle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV313(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bottle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66105549DecodeGithubComAct3AiHopsInternalApisFormulaeBrewShV313(l, v)
}
