name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.22"
  VERSION: ${{ github.ref_type == 'tag' && format('ci-{0}', github.ref_name) || format('ci-{0}', github.sha) }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.58
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0

  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}}
      - name: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Install dependencies
        run: go get .

      - name: Run Go unit tests
        run: |
          go test ./... -v -race \
            -coverpkg=./... -coverprofile cover.out \
            2>&1 | tee test.out
          go tool cover -func cover.out

      - name: Create HTML report
        run: |
          go tool cover -html cover.out -o coverage.html

      - name: Create Cobertura report
        run: |
          go install github.com/t-yuki/gocover-cobertura@latest
          gocover-cobertura < cover.out > coverage.xml

      - name: Create coverage summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Set job summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Upload test artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: tests--${{env.VERSION}}
          path: |
            test.out
            cover.out
            coverage.html
            coverage.xml
            code-coverage-results.md

  build:
    name: Go build
    runs-on: ubuntu-latest
    # permissions:
    #   id-token: write
    #   contents: read
    #   attestations: write
    env:
      EXECUTABLE: hops
      CGO_ENABLED: 0
    outputs:
      artifact-id: ${{ steps.upload.outputs.artifact-id }}
    strategy:
      matrix:
        GOOS:
          - linux
          # - windows
          # - darwin
        GOARCH:
          - amd64
          # - arm64
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}}

      # Go build
      - name: Build hops
        id: build
        env:
          EXECUTABLE_PATH: bin/hops
        run: |
          go build \
            -trimpath -ldflags="-s -w -X 'main.version=${{env.VERSION}}'" \
            -o ${{env.EXECUTABLE_PATH}} \
            ./cmd/hops
          echo "executable-path=${{env.EXECUTABLE_PATH}}" >> $GITHUB_OUTPUT

      # - uses: actions/attest-build-provenance@v1
      #   id: attest
      #   with:
      #     subject-path: ${{steps.build.outputs.executable-path}}

      - name: Create archive
        id: archive
        env:
          ARCHIVE_DIR: hops/${{env.VERSION}}
          ARCHIVE_PATH: hops--${{matrix.GOOS}}--${{matrix.GOARCH}}.tar.gz
        # mv ${{ steps.attest.outputs.bundle-path }} ${{env.ARCHIVE_DIR}}/
        run: |
          mkdir -p ${{env.ARCHIVE_DIR}}/bin/
          mv ${{steps.build.outputs.executable-path}} ${{env.ARCHIVE_DIR}}/bin/
          tar -czvf ${{env.ARCHIVE_PATH}} ${{env.ARCHIVE_DIR}}/
          echo "archive-path=${{env.ARCHIVE_PATH}}" >> $GITHUB_OUTPUT
          echo "executable-path=${{env.ARCHIVE_DIR}}/bin/hops" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: hops--${{matrix.GOOS}}--${{matrix.GOARCH}}
          path: |
            ${{steps.archive.outputs.archive-path}}

  build-image:
    name: Build image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write # to push image to ghcr.io
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/act3-ai/hops/ci
          # generate Docker tags based on the following events/attributes
          # tags: |
          #   type=schedule
          #   type=ref,event=branch
          #   type=ref,event=pr
          #   type=semver,pattern={{version}}
          #   type=semver,pattern={{major}}.{{minor}}
          #   type=semver,pattern={{major}}
          #   type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Login to Docker Hub
      #   if: github.event_name != 'pull_request'
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: hops--linux--amd64

      - name: Unpack build artifact
        run: |
          tar -xvf hops--linux--amd64.tar.gz

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ghcr.io/act3-ai/hops/${{env.VERSION}}
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            HOPS_EXECUTABLE=hops/${{env.VERSION}}/bin/hops
