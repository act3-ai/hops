name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: "1.22"
  VERSION: ${{ format('ci-{0}', github.sha) }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.58
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
      - name: markdownlint
        uses: DavidAnson/markdownlint-cli2-action@v9

  scan:
    name: Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  unit-test:
    name: Unit test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install dependencies
        run: go get .

      - name: Run Go unit tests
        run: |
          go test ./... -v -race \
            -coverpkg=./... -coverprofile cover.out \
            2>&1 | tee test.out
          go tool cover -func cover.out

      - name: Create HTML report
        run: |
          go tool cover -html cover.out -o coverage.html

      - name: Create Cobertura report
        run: |
          go install github.com/t-yuki/gocover-cobertura@latest
          gocover-cobertura < cover.out > coverage.xml

      - name: Create coverage summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Set job summary
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Upload test artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: tests_${{env.VERSION}}
          path: |
            test.out
            cover.out
            coverage.html
            coverage.xml
            code-coverage-results.md

  build:
    name: Build binary
    runs-on: ubuntu-latest
    env:
      EXECUTABLE: hops
      CGO_ENABLED: 0
    outputs:
      artifact-id: ${{ steps.upload.outputs.artifact-id }}
    strategy:
      matrix:
        GOOS:
          - linux
          # - windows
          # - darwin
        GOARCH:
          - amd64
          # - arm64
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      # Go build
      - name: Build hops
        id: build
        run: |
          go build \
            -trimpath -ldflags="-s -w -X 'main.version=${{env.VERSION}}'" \
            -o bin/hops \
            ./cmd/hops
          echo "executable-path=bin/hops" >> $GITHUB_OUTPUT

      - name: Create archive
        id: archive
        env:
          ARCHIVE_DIR: hops/${{env.VERSION}}
          ARCHIVE_PATH: hops_${{matrix.GOOS}}_${{matrix.GOARCH}}.tar.gz
        # mv ${{ steps.attest.outputs.bundle-path }} ${{env.ARCHIVE_DIR}}/
        run: |
          mkdir -p ${{env.ARCHIVE_DIR}}/bin/
          mv bin/hops ${{env.ARCHIVE_DIR}}/bin/
          tar -czvf ${{env.ARCHIVE_PATH}} ${{env.ARCHIVE_DIR}}/
          echo "archive-path=${{env.ARCHIVE_PATH}}" >> $GITHUB_OUTPUT
          echo "executable-path=${{env.ARCHIVE_DIR}}/bin/hops" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: hops_${{matrix.GOOS}}_${{matrix.GOARCH}}
          path: |
            ${{steps.archive.outputs.archive-path}}

  build-image:
    name: Build image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write # to push image to ghcr.io
    steps:
      - uses: actions/checkout@v4

      # Set up tools
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Authenticate to ghcr.io
      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Download and unpack already-built binary
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: hops_linux_amd64
      - name: Unpack build artifact
        run: |
          tar -xvf hops_linux_amd64.tar.gz

      # Create image metadata
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/act3-ai/hops/ci

      # Build and push image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            HOPS_EXECUTABLE=hops/${{env.VERSION}}/bin/hops
          tags: |
            ghcr.io/act3-ai/hops/ci:${{env.VERSION}}
          push: true
          annotations: ${{ steps.meta.outputs.annotations }}
          labels: ${{ steps.meta.outputs.labels }}

  integration-test:
    name: Integration test
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Download and unpack already-built binary
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: hops_linux_amd64
      - name: Unpack build artifact
        run: |
          tar -xvf hops_linux_amd64.tar.gz
      - name: Add Hops to PATH
        run: |
          echo "hops/${{env.VERSION}}/bin" >> $GITHUB_PATH

      # Authenticate to ghcr.io
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Run tests
      - name: Test Homebrew API mode
        run: |
          hops install gh
          hops uninstall gh
          hops install gh
          hops deps ffmpeg

      - name: Test standalone registry mode
        env:
          HOPS_REGISTRY: ./bottles
          HOPS_REGISTRY_OCI_LAYOUT: true
        run: |
          hops copy node --to ./bottles --to-oci-layout
          hops install node
          hops uninstall node
          hops install node
          hops deps node
